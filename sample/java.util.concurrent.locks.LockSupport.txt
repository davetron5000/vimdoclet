*java.util.concurrent.locks.LockSupport* *LockSupport* Basic thread blocking pri

public class LockSupport
  extends    |java.lang.Object|

|java.util.concurrent.locks.LockSupport_Description|
|java.util.concurrent.locks.LockSupport_Fields|
|java.util.concurrent.locks.LockSupport_Constructors|
|java.util.concurrent.locks.LockSupport_Methods|

================================================================================

*java.util.concurrent.locks.LockSupport_Methods*
|java.util.concurrent.locks.LockSupport.getBlocker(Thread)|Returns the blocker 
|java.util.concurrent.locks.LockSupport.park()|Disables the current thread for 
|java.util.concurrent.locks.LockSupport.park(Object)|Disables the current threa
|java.util.concurrent.locks.LockSupport.parkNanos(long)|Disables the current th
|java.util.concurrent.locks.LockSupport.parkNanos(Object,long)|Disables the cur
|java.util.concurrent.locks.LockSupport.parkUntil(long)|Disables the current th
|java.util.concurrent.locks.LockSupport.parkUntil(Object,long)|Disables the cur
|java.util.concurrent.locks.LockSupport.unpark(Thread)|Makes available the perm

*java.util.concurrent.locks.LockSupport_Description*

Basic thread blocking primitives for creating locks and other synchronization 
classes. 

This class associates, with each thread that uses it, a permit (in the sense of 
the Semaphore(|java.util.concurrent.Semaphore|) class). A call toparkwill 
return immediately if the permit is available, consuming it in the process; 
otherwise it may block. A call tounparkmakes the permit available, if it was 
not already available. (Unlike with Semaphores though, permits do not 
accumulate. There is at most one.) 

Methodsparkandunparkprovide efficient means of blocking and unblocking threads 
that do not encounter the problems that cause the deprecated 
methodsThread.suspendandThread.resumeto be unusable for such purposes: Races 
between one thread invokingparkand another thread trying tounparkit will 
preserve liveness, due to the permit. Additionally,parkwill return if the 
caller's thread was interrupted, and timeout versions are supported. 
Theparkmethod may also return at any other time, for "no reason", so in general 
must be invoked within a loop that rechecks conditions upon return. In this 
senseparkserves as an optimization of a "busy wait" that does not waste as much 
time spinning, but must be paired with anunparkto be effective. 

The three forms ofparkeach also support ablockerobject parameter. This object 
is recorded while the thread is blocked to permit monitoring and diagnostic 
tools to identify the reasons that threads are blocked. (Such tools may access 
blockers using method (|java.util.concurrent.locks.LockSupport|) .) The use of 
these forms rather than the original forms without this parameter is strongly 
encouraged. The normal argument to supply as ablockerwithin a lock 
implementation isthis. 

These methods are designed to be used as tools for creating higher-level 
synchronization utilities, and are not in themselves useful for most 
concurrency control applications. Theparkmethod is designed for use only in 
constructions of the form: 

while (!canProceed()) { ... LockSupport.park(this); } 

where neithercanProceednor any other actions prior to the call toparkentail 
locking or blocking. Because only one permit is associated with each thread, 
any intermediary uses ofparkcould interfere with its intended effects. 

Sample Usage. Here is a sketch of a first-in-first-out non-reentrant lock 
class: 

class FIFOMutex { private final AtomicBoolean locked = new 
AtomicBoolean(false); private final Queue waiters = new 
ConcurrentLinkedQueue(); 

public void lock() { boolean wasInterrupted = false; Thread current = 
Thread.currentThread(); waiters.add(current); 

// Block while not first in queue or cannot acquire lock while (waiters.peek() 
!= current || !locked.compareAndSet(false, true)) { LockSupport.park(this); if 
(Thread.interrupted()) // ignore interrupts while waiting wasInterrupted = 
true; } 

waiters.remove(); if (wasInterrupted) // reassert interrupt status on exit 
current.interrupt(); } 

public void unlock() { locked.set(false); LockSupport.unpark(waiters.peek()); } 
} 



*java.util.concurrent.locks.LockSupport.getBlocker(Thread)*

public static |java.lang.Object| getBlocker(java.lang.Thread t)

Returns the blocker object supplied to the most recent invocation of a park 
method that has not yet unblocked, or null if not blocked. The value returned 
is just a momentary snapshot -- the thread may have since unblocked or blocked 
on a different blocker object. 



    Returns: 

*java.util.concurrent.locks.LockSupport.park()*

public static void park()

Disables the current thread for thread scheduling purposes unless the permit is 
available. 

If the permit is available then it is consumed and the call returns 
immediately; otherwise the current thread becomes disabled for thread 
scheduling purposes and lies dormant until one of three things happens: 



Some other thread invokes unpark(|java.util.concurrent.locks.LockSupport|) with 
the current thread as the target; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The call spuriously (that is, for no reason) returns. 

This method does not report which of these caused the method to return. Callers 
should re-check the conditions which caused the thread to park in the first 
place. Callers may also determine, for example, the interrupt status of the 
thread upon return. 



*java.util.concurrent.locks.LockSupport.park(Object)*

public static void park(java.lang.Object blocker)

Disables the current thread for thread scheduling purposes unless the permit is 
available. 

If the permit is available then it is consumed and the call returns 
immediately; otherwise the current thread becomes disabled for thread 
scheduling purposes and lies dormant until one of three things happens: 

Some other thread invokes unpark(|java.util.concurrent.locks.LockSupport|) with 
the current thread as the target; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The call spuriously (that is, for no reason) returns. 

This method does not report which of these caused the method to return. Callers 
should re-check the conditions which caused the thread to park in the first 
place. Callers may also determine, for example, the interrupt status of the 
thread upon return. 


    blocker - the synchronization object responsible for this thread parking 

*java.util.concurrent.locks.LockSupport.parkNanos(long)*

public static void parkNanos(long nanos)

Disables the current thread for thread scheduling purposes, for up to the 
specified waiting time, unless the permit is available. 

If the permit is available then it is consumed and the call returns 
immediately; otherwise the current thread becomes disabled for thread 
scheduling purposes and lies dormant until one of four things happens: 

Some other thread invokes unpark(|java.util.concurrent.locks.LockSupport|) with 
the current thread as the target; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The specified waiting time elapses; or 

The call spuriously (that is, for no reason) returns. 

This method does not report which of these caused the method to return. Callers 
should re-check the conditions which caused the thread to park in the first 
place. Callers may also determine, for example, the interrupt status of the 
thread, or the elapsed time upon return. 


    nanos - the maximum number of nanoseconds to wait 

*java.util.concurrent.locks.LockSupport.parkNanos(Object,long)*

public static void parkNanos(
  java.lang.Object blocker,
  long nanos)

Disables the current thread for thread scheduling purposes, for up to the 
specified waiting time, unless the permit is available. 

If the permit is available then it is consumed and the call returns 
immediately; otherwise the current thread becomes disabled for thread 
scheduling purposes and lies dormant until one of four things happens: 

Some other thread invokes unpark(|java.util.concurrent.locks.LockSupport|) with 
the current thread as the target; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The specified waiting time elapses; or 

The call spuriously (that is, for no reason) returns. 

This method does not report which of these caused the method to return. Callers 
should re-check the conditions which caused the thread to park in the first 
place. Callers may also determine, for example, the interrupt status of the 
thread, or the elapsed time upon return. 


    blocker - the synchronization object responsible for this thread parking 
    nanos - the maximum number of nanoseconds to wait 

*java.util.concurrent.locks.LockSupport.parkUntil(long)*

public static void parkUntil(long deadline)

Disables the current thread for thread scheduling purposes, until the specified 
deadline, unless the permit is available. 

If the permit is available then it is consumed and the call returns 
immediately; otherwise the current thread becomes disabled for thread 
scheduling purposes and lies dormant until one of four things happens: 

Some other thread invokes unpark(|java.util.concurrent.locks.LockSupport|) with 
the current thread as the target; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The specified deadline passes; or 

The call spuriously (that is, for no reason) returns. 

This method does not report which of these caused the method to return. Callers 
should re-check the conditions which caused the thread to park in the first 
place. Callers may also determine, for example, the interrupt status of the 
thread, or the current time upon return. 


    deadline - the absolute time, in milliseconds from the Epoch, to wait until 

*java.util.concurrent.locks.LockSupport.parkUntil(Object,long)*

public static void parkUntil(
  java.lang.Object blocker,
  long deadline)

Disables the current thread for thread scheduling purposes, until the specified 
deadline, unless the permit is available. 

If the permit is available then it is consumed and the call returns 
immediately; otherwise the current thread becomes disabled for thread 
scheduling purposes and lies dormant until one of four things happens: 

Some other thread invokes unpark(|java.util.concurrent.locks.LockSupport|) with 
the current thread as the target; or 

Some other thread interrupts(|java.lang.Thread|) the current thread; or 

The specified deadline passes; or 

The call spuriously (that is, for no reason) returns. 

This method does not report which of these caused the method to return. Callers 
should re-check the conditions which caused the thread to park in the first 
place. Callers may also determine, for example, the interrupt status of the 
thread, or the current time upon return. 


    blocker - the synchronization object responsible for this thread parking 
    deadline - the absolute time, in milliseconds from the Epoch, to wait until 

*java.util.concurrent.locks.LockSupport.unpark(Thread)*

public static void unpark(java.lang.Thread thread)

Makes available the permit for the given thread, if it was not already 
available. If the thread was blocked onparkthen it will unblock. Otherwise, its 
next call toparkis guaranteed not to block. This operation is not guaranteed to 
have any effect at all if the given thread has not been started. 


    thread - the thread to unpark, or {@code null}, in which case this operation has no 
       effect 


