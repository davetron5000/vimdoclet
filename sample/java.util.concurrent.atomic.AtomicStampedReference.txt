*java.util.concurrent.atomic.AtomicStampedReference* *AtomicStampedReference* An

public class AtomicStampedReference<V>
  extends    |java.lang.Object|

|java.util.concurrent.atomic.AtomicStampedReference_Description|
|java.util.concurrent.atomic.AtomicStampedReference_Fields|
|java.util.concurrent.atomic.AtomicStampedReference_Constructors|
|java.util.concurrent.atomic.AtomicStampedReference_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicStampedReference_Constructors*
|java.util.concurrent.atomic.AtomicStampedReference(V,int)|Creates a newAtomicS

*java.util.concurrent.atomic.AtomicStampedReference_Methods*
|java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V,int)|Atomica
|java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V,V,int,int)|
|java.util.concurrent.atomic.AtomicStampedReference.get(int[])|Returns the curr
|java.util.concurrent.atomic.AtomicStampedReference.getReference()|Returns the 
|java.util.concurrent.atomic.AtomicStampedReference.getStamp()|Returns the curr
|java.util.concurrent.atomic.AtomicStampedReference.set(V,int)|Unconditionally 
|java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V,V,int,int)|

*java.util.concurrent.atomic.AtomicStampedReference_Description*

AnAtomicStampedReferencemaintains an object reference along with an integer 
"stamp", that can be updated atomically. 

Implementation note. This implementation maintains stamped references by 
creating internal objects representing "boxed" [reference, integer] pairs. 



*java.util.concurrent.atomic.AtomicStampedReference(V,int)*

public AtomicStampedReference(
  V initialRef,
  int initialStamp)

Creates a newAtomicStampedReferencewith the given initial values. 

    initialRef - the initial reference 
    initialStamp - the initial stamp 

*java.util.concurrent.atomic.AtomicStampedReference.attemptStamp(V,int)*

public boolean attemptStamp(
  V expectedReference,
  int newStamp)

Atomically sets the value of the stamp to the given update value if the current 
reference is==to the expected reference. Any given invocation of this operation 
may fail (returnfalse) spuriously, but repeated invocation when the current 
value holds the expected value and no other thread is also attempting to set 
the value will eventually succeed. 


    expectedReference - the expected value of the reference 
    newStamp - the new value for the stamp 

    Returns: true if successful 

*java.util.concurrent.atomic.AtomicStampedReference.compareAndSet(V,V,int,int)*

public boolean compareAndSet(
  V expectedReference,
  V newReference,
  int expectedStamp,
  int newStamp)

Atomically sets the value of both the reference and stamp to the given update 
values if the current reference is==to the expected reference and the current 
stamp is equal to the expected stamp. 


    expectedReference - the expected value of the reference 
    newReference - the new value for the reference 
    expectedStamp - the expected value of the stamp 
    newStamp - the new value for the stamp 

    Returns: true if successful 

*java.util.concurrent.atomic.AtomicStampedReference.get(int[])*

public |V| get(int[] stampHolder)

Returns the current values of both the reference and the stamp. Typical usage 
isint[1] holder; ref = v.get(holder);. 


    stampHolder - an array of size of at least one. On return, {@code stampholder[0]} will hold 
       the value of the stamp. 

    Returns: the current value of the reference 

*java.util.concurrent.atomic.AtomicStampedReference.getReference()*

public |V| getReference()

Returns the current value of the reference. 



    Returns: the current value of the reference 

*java.util.concurrent.atomic.AtomicStampedReference.getStamp()*

public int getStamp()

Returns the current value of the stamp. 



    Returns: the current value of the stamp 

*java.util.concurrent.atomic.AtomicStampedReference.set(V,int)*

public void set(
  V newReference,
  int newStamp)

Unconditionally sets the value of both the reference and stamp. 


    newReference - the new value for the reference 
    newStamp - the new value for the stamp 

*java.util.concurrent.atomic.AtomicStampedReference.weakCompareAndSet(V,V,int,int)*

public boolean weakCompareAndSet(
  V expectedReference,
  V newReference,
  int expectedStamp,
  int newStamp)

Atomically sets the value of both the reference and stamp to the given update 
values if the current reference is==to the expected reference and the current 
stamp is equal to the expected stamp. 

May fail spuriously and does not provide ordering guarantees, so is only rarely 
an appropriate alternative tocompareAndSet. 


    expectedReference - the expected value of the reference 
    newReference - the new value for the reference 
    expectedStamp - the expected value of the stamp 
    newStamp - the new value for the stamp 

    Returns: true if successful 


