*java.util.concurrent.CopyOnWriteArrayList* *CopyOnWriteArrayList* A thread-safe

public class CopyOnWriteArrayList<E>
  extends    |java.lang.Object|
  implements |java.util.List|
             |java.util.RandomAccess|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.concurrent.CopyOnWriteArrayList_Description|
|java.util.concurrent.CopyOnWriteArrayList_Fields|
|java.util.concurrent.CopyOnWriteArrayList_Constructors|
|java.util.concurrent.CopyOnWriteArrayList_Methods|

================================================================================

*java.util.concurrent.CopyOnWriteArrayList_Constructors*
|java.util.concurrent.CopyOnWriteArrayList()|Creates an empty list.
|java.util.concurrent.CopyOnWriteArrayList(Collection<?extendsE>)|Creates a lis
|java.util.concurrent.CopyOnWriteArrayList(E[])|Creates a list holding a copy o

*java.util.concurrent.CopyOnWriteArrayList_Methods*
|java.util.concurrent.CopyOnWriteArrayList.add(E)|Appends the specified element
|java.util.concurrent.CopyOnWriteArrayList.add(int,E)|Inserts the specified ele
|java.util.concurrent.CopyOnWriteArrayList.addAll(Collection<?extendsE>)|Append
|java.util.concurrent.CopyOnWriteArrayList.addAll(int,Collection<?extendsE>)|In
|java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Collection<?extendsE>)|
|java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E)|Append the element if
|java.util.concurrent.CopyOnWriteArrayList.clear()|Removes all of the elements 
|java.util.concurrent.CopyOnWriteArrayList.clone()|Returns a shallow copy of th
|java.util.concurrent.CopyOnWriteArrayList.contains(Object)|Returns true if thi
|java.util.concurrent.CopyOnWriteArrayList.containsAll(Collection<?>)|Returns t
|java.util.concurrent.CopyOnWriteArrayList.equals(Object)|Compares the specifie
|java.util.concurrent.CopyOnWriteArrayList.get(int)|
|java.util.concurrent.CopyOnWriteArrayList.hashCode()|Returns the hash code val
|java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)|Returns the index of 
|java.util.concurrent.CopyOnWriteArrayList.indexOf(Object)|
|java.util.concurrent.CopyOnWriteArrayList.isEmpty()|Returns true if this list 
|java.util.concurrent.CopyOnWriteArrayList.iterator()|Returns an iterator over 
|java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)|Returns the index
|java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object)|
|java.util.concurrent.CopyOnWriteArrayList.listIterator()|
|java.util.concurrent.CopyOnWriteArrayList.listIterator(int)|
|java.util.concurrent.CopyOnWriteArrayList.remove(int)|Removes the element at t
|java.util.concurrent.CopyOnWriteArrayList.remove(Object)|Removes the first occ
|java.util.concurrent.CopyOnWriteArrayList.removeAll(Collection<?>)|Removes fro
|java.util.concurrent.CopyOnWriteArrayList.retainAll(Collection<?>)|Retains onl
|java.util.concurrent.CopyOnWriteArrayList.set(int,E)|Replaces the element at t
|java.util.concurrent.CopyOnWriteArrayList.size()|Returns the number of element
|java.util.concurrent.CopyOnWriteArrayList.subList(int,int)|Returns a view of t
|java.util.concurrent.CopyOnWriteArrayList.toArray()|Returns an array containin
|java.util.concurrent.CopyOnWriteArrayList.toArray(T[])|Returns an array contai
|java.util.concurrent.CopyOnWriteArrayList.toString()|Returns a string represen

*java.util.concurrent.CopyOnWriteArrayList_Description*

A thread-safe variant of (|java.util.ArrayList|) in which all mutative 
operations (add, set, and so on) are implemented by making a fresh copy of the 
underlying array. 

This is ordinarily too costly, but may be more efficient than alternatives when 
traversal operations vastly outnumber mutations, and is useful when you cannot 
or don't want to synchronize traversals, yet need to preclude interference 
among concurrent threads. The "snapshot" style iterator method uses a reference 
to the state of the array at the point that the iterator was created. This 
array never changes during the lifetime of the iterator, so interference is 
impossible and the iterator is guaranteed not to throw 
ConcurrentModificationException. The iterator will not reflect additions, 
removals, or changes to the list since the iterator was created. 
Element-changing operations on iterators themselves (remove, set, and add) are 
not supported. These methods throw UnsupportedOperationException. 

All elements are permitted, including null. 

Memory consistency effects: As with other concurrent collections, actions in a 
thread prior to placing an object into aCopyOnWriteArrayListhappen-before 
actions subsequent to the access or removal of that element from 
theCopyOnWriteArrayListin another thread. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.CopyOnWriteArrayList()*

public CopyOnWriteArrayList()

Creates an empty list. 


*java.util.concurrent.CopyOnWriteArrayList(Collection<?extendsE>)*

public CopyOnWriteArrayList(java.util.Collection<? extends E> c)

Creates a list containing the elements of the specified collection, in the 
order they are returned by the collection's iterator. 

    c - the collection of initially held elements 

*java.util.concurrent.CopyOnWriteArrayList(E[])*

public CopyOnWriteArrayList(E[] toCopyIn)

Creates a list holding a copy of the given array. 

    toCopyIn - the array (a copy of this array is used as the internal array) 

*java.util.concurrent.CopyOnWriteArrayList.add(E)*

public boolean add(E e)

Appends the specified element to the end of this list. 


    e - element to be appended to this list 

    Returns: true (as specified by {@link Collection#add}) 

*java.util.concurrent.CopyOnWriteArrayList.add(int,E)*

public void add(
  int index,
  E element)

Inserts the specified element at the specified position in this list. Shifts 
the element currently at that position (if any) and any subsequent elements to 
the right (adds one to their indices). 



*java.util.concurrent.CopyOnWriteArrayList.addAll(Collection<?extendsE>)*

public boolean addAll(java.util.Collection<? extends E> c)

Appends all of the elements in the specified collection to the end of this 
list, in the order that they are returned by the specified collection's 
iterator. 


    c - collection containing elements to be added to this list 

    Returns: true if this list changed as a result of the call 

*java.util.concurrent.CopyOnWriteArrayList.addAll(int,Collection<?extendsE>)*

public boolean addAll(
  int index,
  java.util.Collection<? extends E> c)

Inserts all of the elements in the specified collection into this list, 
starting at the specified position. Shifts the element currently at that 
position (if any) and any subsequent elements to the right (increases their 
indices). The new elements will appear in this list in the order that they are 
returned by the specified collection's iterator. 


    index - index at which to insert the first element from the specified collection 
    c - collection containing elements to be added to this list 

    Returns: true if this list changed as a result of the call 

*java.util.concurrent.CopyOnWriteArrayList.addAllAbsent(Collection<?extendsE>)*

public int addAllAbsent(java.util.Collection<? extends E> c)

Appends all of the elements in the specified collection that are not already 
contained in this list, to the end of this list, in the order that they are 
returned by the specified collection's iterator. 


    c - collection containing elements to be added to this list 

    Returns: the number of elements added 

*java.util.concurrent.CopyOnWriteArrayList.addIfAbsent(E)*

public boolean addIfAbsent(E e)

Append the element if not present. 


    e - element to be added to this list, if absent 

    Returns: true if the element was added 

*java.util.concurrent.CopyOnWriteArrayList.clear()*

public void clear()

Removes all of the elements from this list. The list will be empty after this 
call returns. 



*java.util.concurrent.CopyOnWriteArrayList.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this list. (The elements themselves are not copied.) 



    Returns: a clone of this list 

*java.util.concurrent.CopyOnWriteArrayList.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this list contains the specified element. More formally, 
returns true if and only if this list contains at least one element e such that 
(o==null?e==null:o.equals(e)). 


    o - element whose presence in this list is to be tested 

    Returns: true if this list contains the specified element 

*java.util.concurrent.CopyOnWriteArrayList.containsAll(Collection<?>)*

public boolean containsAll(java.util.Collection<?> c)

Returns true if this list contains all of the elements of the specified 
collection. 


    c - collection to be checked for containment in this list 

    Returns: true if this list contains all of the elements of the specified collection 

*java.util.concurrent.CopyOnWriteArrayList.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this list for equality. Returnstrueif the 
specified object is the same object as this object, or if it is also a 
(|java.util.List|) and the sequence of elements returned by an 
iterator(|java.util.List|) over the specified list is the same as the sequence 
returned by an iterator over this list. The two sequences are considered to be 
the same if they have the same length and corresponding elements at the same 
position in the sequence are equal. Two elementse1ande2are considered equal 
if(e1==null ? e2==null : e1.equals(e2)). 


    o - the object to be compared for equality with this list 

    Returns: {@code true} if the specified object is equal to this list 

*java.util.concurrent.CopyOnWriteArrayList.get(int)*

public |E| get(int index)





*java.util.concurrent.CopyOnWriteArrayList.hashCode()*

public int hashCode()

Returns the hash code value for this list. 

This implementation uses the definition in (|java.util.List|) . 



    Returns: the hash code value for this list 

*java.util.concurrent.CopyOnWriteArrayList.indexOf(E,int)*

public int indexOf(
  E e,
  int index)

Returns the index of the first occurrence of the specified element in this 
list, searching forwards from index, or returns -1 if the element is not found. 
More formally, returns the lowest index i such that (i>=index and and 
(e==null?get(i)==null:e.equals(get(i)))), or -1 if there is no such index. 


    e - element to search for 
    index - index to start searching from 

    Returns: the index of the first occurrence of the element in this list at position index 
             or later in the list; -1 if the element is not found. 

*java.util.concurrent.CopyOnWriteArrayList.indexOf(Object)*

public int indexOf(java.lang.Object o)





*java.util.concurrent.CopyOnWriteArrayList.isEmpty()*

public boolean isEmpty()

Returns true if this list contains no elements. 



    Returns: true if this list contains no elements 

*java.util.concurrent.CopyOnWriteArrayList.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this list in proper sequence. 

The returned iterator provides a snapshot of the state of the list when the 
iterator was constructed. No synchronization is needed while traversing the 
iterator. The iterator does NOT support the remove method. 



    Returns: an iterator over the elements in this list in proper sequence 

*java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(E,int)*

public int lastIndexOf(
  E e,
  int index)

Returns the index of the last occurrence of the specified element in this list, 
searching backwards from index, or returns -1 if the element is not found. More 
formally, returns the highest index i such that (i<=index and and 
(e==null?get(i)==null:e.equals(get(i)))), or -1 if there is no such index. 


    e - element to search for 
    index - index to start searching backwards from 

    Returns: the index of the last occurrence of the element at position less than or equal 
             to index in this list; -1 if the element is not found. 

*java.util.concurrent.CopyOnWriteArrayList.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object o)





*java.util.concurrent.CopyOnWriteArrayList.listIterator()*

public |java.util.ListIterator|<E> listIterator()

The returned iterator provides a snapshot of the state of the list when the 
iterator was constructed. No synchronization is needed while traversing the 
iterator. The iterator does NOT support the remove, set or add methods. 



*java.util.concurrent.CopyOnWriteArrayList.listIterator(int)*

public |java.util.ListIterator|<E> listIterator(int index)

The returned iterator provides a snapshot of the state of the list when the 
iterator was constructed. No synchronization is needed while traversing the 
iterator. The iterator does NOT support the remove, set or add methods. 



*java.util.concurrent.CopyOnWriteArrayList.remove(int)*

public |E| remove(int index)

Removes the element at the specified position in this list. Shifts any 
subsequent elements to the left (subtracts one from their indices). Returns the 
element that was removed from the list. 



*java.util.concurrent.CopyOnWriteArrayList.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the first occurrence of the specified element from this list, if it is 
present. If this list does not contain the element, it is unchanged. More 
formally, removes the element with the lowest index i such that 
(o==null?get(i)==null:o.equals(get(i))) (if such an element exists). Returns 
true if this list contained the specified element (or equivalently, if this 
list changed as a result of the call). 


    o - element to be removed from this list, if present 

    Returns: true if this list contained the specified element 

*java.util.concurrent.CopyOnWriteArrayList.removeAll(Collection<?>)*

public boolean removeAll(java.util.Collection<?> c)

Removes from this list all of its elements that are contained in the specified 
collection. This is a particularly expensive operation in this class because of 
the need for an internal temporary array. 


    c - collection containing elements to be removed from this list 

    Returns: true if this list changed as a result of the call 

*java.util.concurrent.CopyOnWriteArrayList.retainAll(Collection<?>)*

public boolean retainAll(java.util.Collection<?> c)

Retains only the elements in this list that are contained in the specified 
collection. In other words, removes from this list all of its elements that are 
not contained in the specified collection. 


    c - collection containing elements to be retained in this list 

    Returns: true if this list changed as a result of the call 

*java.util.concurrent.CopyOnWriteArrayList.set(int,E)*

public |E| set(
  int index,
  E element)

Replaces the element at the specified position in this list with the specified 
element. 



*java.util.concurrent.CopyOnWriteArrayList.size()*

public int size()

Returns the number of elements in this list. 



    Returns: the number of elements in this list 

*java.util.concurrent.CopyOnWriteArrayList.subList(int,int)*

public |java.util.List|<E> subList(
  int fromIndex,
  int toIndex)

Returns a view of the portion of this list between fromIndex, inclusive, and 
toIndex, exclusive. The returned list is backed by this list, so changes in the 
returned list are reflected in this list, and vice-versa. While mutative 
operations are supported, they are probably not very useful for 
CopyOnWriteArrayLists. 

The semantics of the list returned by this method become undefined if the 
backing list (i.e., this list) is structurally modified in any way other than 
via the returned list. (Structural modifications are those that change the size 
of the list, or otherwise perturb it in such a fashion that iterations in 
progress may yield incorrect results.) 


    fromIndex - low endpoint (inclusive) of the subList 
    toIndex - high endpoint (exclusive) of the subList 

    Returns: a view of the specified range within this list 

*java.util.concurrent.CopyOnWriteArrayList.toArray()*

public |java.lang.Object|[] toArray()

Returns an array containing all of the elements in this list in proper sequence 
(from first to last element). 

The returned array will be "safe" in that no references to it are maintained by 
this list. (In other words, this method must allocate a new array). The caller 
is thus free to modify the returned array. 

This method acts as bridge between array-based and collection-based APIs. 



    Returns: an array containing all the elements in this list 

*java.util.concurrent.CopyOnWriteArrayList.toArray(T[])*

public |T|[] toArray(T[] a)

Returns an array containing all of the elements in this list in proper sequence 
(from first to last element); the runtime type of the returned array is that of 
the specified array. If the list fits in the specified array, it is returned 
therein. Otherwise, a new array is allocated with the runtime type of the 
specified array and the size of this list. 

If this list fits in the specified array with room to spare (i.e., the array 
has more elements than this list), the element in the array immediately 
following the end of the list is set to null. (This is useful in determining 
the length of this list only if the caller knows that this list does not 
contain any null elements.) 

Like the (|java.util.concurrent.CopyOnWriteArrayList|) method, this method acts 
as bridge between array-based and collection-based APIs. Further, this method 
allows precise control over the runtime type of the output array, and may, 
under certain circumstances, be used to save allocation costs. 

Suppose x is a list known to contain only strings. The following code can be 
used to dump the list into a newly allocated array of String: 



String[] y = x.toArray(new String[0]); 

Note that toArray(new Object[0]) is identical in function to toArray(). 


    a - the array into which the elements of the list are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing all the elements in this list 

*java.util.concurrent.CopyOnWriteArrayList.toString()*

public |java.lang.String| toString()

Returns a string representation of this list. The string representation 
consists of the string representations of the list's elements in the order they 
are returned by its iterator, enclosed in square brackets ("[]"). Adjacent 
elements are separated by the characters ", " (comma and space). Elements are 
converted to strings as by (|java.lang.String|) . 



    Returns: a string representation of this list 


