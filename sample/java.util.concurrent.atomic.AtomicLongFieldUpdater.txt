*java.util.concurrent.atomic.AtomicLongFieldUpdater* *AtomicLongFieldUpdater* A 

public abstract class AtomicLongFieldUpdater<T>
  extends    |java.lang.Object|

|java.util.concurrent.atomic.AtomicLongFieldUpdater_Description|
|java.util.concurrent.atomic.AtomicLongFieldUpdater_Fields|
|java.util.concurrent.atomic.AtomicLongFieldUpdater_Constructors|
|java.util.concurrent.atomic.AtomicLongFieldUpdater_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicLongFieldUpdater_Constructors*
|java.util.concurrent.atomic.AtomicLongFieldUpdater()|Protected do-nothing cons

*java.util.concurrent.atomic.AtomicLongFieldUpdater_Methods*
|java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)|Atomicall
|java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)|
|java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T)|Gets the current val
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)|Atomicall
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)|Atomicall
|java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T)|Atomical
|java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T,long)|Eventually 
|java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Class<U>,String)|
|java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)|Sets the field 
|java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)|

*java.util.concurrent.atomic.AtomicLongFieldUpdater_Description*

A reflection-based utility that enables atomic updates to designatedvolatile 
longfields of designated classes. This class is designed for use in atomic data 
structures in which several fields of the same node are independently subject 
to atomic updates. 

Note that the guarantees of thecompareAndSetmethod in this class are weaker 
than in other atomic classes. Because this class cannot ensure that all uses of 
the field are appropriate for purposes of atomic access, it can guarantee 
atomicity only with respect to other invocations ofcompareAndSetandseton the 
same updater. 



*java.util.concurrent.atomic.AtomicLongFieldUpdater()*

protected AtomicLongFieldUpdater()

Protected do-nothing constructor for use by subclasses. 


*java.util.concurrent.atomic.AtomicLongFieldUpdater.addAndGet(T,long)*

public long addAndGet(
  T obj,
  long delta)

Atomically adds the given value to the current value of the field of the given 
object managed by this updater. 


    obj - An object whose field to get and set 
    delta - the value to add 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.compareAndSet(T,long,long)*

public abstract boolean compareAndSet(
  T obj,
  long expect,
  long update)

Atomically sets the field of the given object managed by this updater to the 
given updated value if the current value==the expected value. This method is 
guaranteed to be atomic with respect to other calls tocompareAndSetandset, but 
not necessarily with respect to other changes in the field. 


    obj - An object whose field to conditionally set 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.decrementAndGet(T)*

public long decrementAndGet(T obj)

Atomically decrements by one the current value of the field of the given object 
managed by this updater. 


    obj - An object whose field to get and set 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.get(T)*

public abstract long get(T obj)

Gets the current value held in the field of the given object managed by this 
updater. 


    obj - An object whose field to get 

    Returns: the current value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndAdd(T,long)*

public long getAndAdd(
  T obj,
  long delta)

Atomically adds the given value to the current value of the field of the given 
object managed by this updater. 


    obj - An object whose field to get and set 
    delta - the value to add 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndDecrement(T)*

public long getAndDecrement(T obj)

Atomically decrements by one the current value of the field of the given object 
managed by this updater. 


    obj - An object whose field to get and set 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndIncrement(T)*

public long getAndIncrement(T obj)

Atomically increments by one the current value of the field of the given object 
managed by this updater. 


    obj - An object whose field to get and set 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.getAndSet(T,long)*

public long getAndSet(
  T obj,
  long newValue)

Atomically sets the field of the given object managed by this updater to the 
given value and returns the old value. 


    obj - An object whose field to get and set 
    newValue - the new value 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.incrementAndGet(T)*

public long incrementAndGet(T obj)

Atomically increments by one the current value of the field of the given object 
managed by this updater. 


    obj - An object whose field to get and set 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.lazySet(T,long)*

public abstract void lazySet(
  T obj,
  long newValue)

Eventually sets the field of the given object managed by this updater to the 
given updated value. 


    obj - An object whose field to set 
    newValue - the new value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater(Class<U>,String)*

public static |java.util.concurrent.atomic.AtomicLongFieldUpdater|<U> newUpdater(
  java.lang.Class<U> tclass,
  java.lang.String fieldName)

Creates and returns an updater for objects with the given field. The Class 
argument is needed to check that reflective types and generic types match. 


    tclass - the class of the objects holding the field 
    fieldName - the name of the field to be updated. 

    Returns: 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.set(T,long)*

public abstract void set(
  T obj,
  long newValue)

Sets the field of the given object managed by this updater to the given updated 
value. This operation is guaranteed to act as a volatile store with respect to 
subsequent invocations ofcompareAndSet. 


    obj - An object whose field to set 
    newValue - the new value 

*java.util.concurrent.atomic.AtomicLongFieldUpdater.weakCompareAndSet(T,long,long)*

public abstract boolean weakCompareAndSet(
  T obj,
  long expect,
  long update)

Atomically sets the field of the given object managed by this updater to the 
given updated value if the current value==the expected value. This method is 
guaranteed to be atomic with respect to other calls tocompareAndSetandset, but 
not necessarily with respect to other changes in the field. 

May fail spuriously and does not provide ordering guarantees, so is only rarely 
an appropriate alternative tocompareAndSet. 


    obj - An object whose field to conditionally set 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


