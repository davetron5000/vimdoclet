*java.util.TreeMap* *TreeMap* A Red-Black tree basedNavigableMapimplementation.

public class TreeMap<K,V>
  extends    |java.util.AbstractMap|
  implements |java.util.NavigableMap|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.TreeMap_Description|
|java.util.TreeMap_Fields|
|java.util.TreeMap_Constructors|
|java.util.TreeMap_Methods|

================================================================================

*java.util.TreeMap_Constructors*
|java.util.TreeMap()|Constructs a new, empty tree map, using the natural orderi
|java.util.TreeMap(Comparator<?superK>)|Constructs a new, empty tree map, order
|java.util.TreeMap(Map<?extendsK,?extendsV>)|Constructs a new tree map containi
|java.util.TreeMap(SortedMap<K,?extendsV>)|Constructs a new tree map containing

*java.util.TreeMap_Methods*
|java.util.TreeMap.ceilingEntry(K)|
|java.util.TreeMap.ceilingKey(K)|
|java.util.TreeMap.clear()|Removes all of the mappings from this map.
|java.util.TreeMap.clone()|Returns a shallow copy of this TreeMap instance.
|java.util.TreeMap.comparator()|
|java.util.TreeMap.containsKey(Object)|Returns true if this map contains a mapp
|java.util.TreeMap.containsValue(Object)|Returns true if this map maps one or m
|java.util.TreeMap.descendingKeySet()|
|java.util.TreeMap.descendingMap()|
|java.util.TreeMap.entrySet()|Returns aSetview of the mappings contained in thi
|java.util.TreeMap.firstEntry()|
|java.util.TreeMap.firstKey()|
|java.util.TreeMap.floorEntry(K)|
|java.util.TreeMap.floorKey(K)|
|java.util.TreeMap.get(Object)|Returns the value to which the specified key is 
|java.util.TreeMap.headMap(K)|
|java.util.TreeMap.headMap(K,boolean)|
|java.util.TreeMap.higherEntry(K)|
|java.util.TreeMap.higherKey(K)|
|java.util.TreeMap.keySet()|Returns aSetview of the keys contained in this map.
|java.util.TreeMap.lastEntry()|
|java.util.TreeMap.lastKey()|
|java.util.TreeMap.lowerEntry(K)|
|java.util.TreeMap.lowerKey(K)|
|java.util.TreeMap.navigableKeySet()|
|java.util.TreeMap.pollFirstEntry()|
|java.util.TreeMap.pollLastEntry()|
|java.util.TreeMap.put(K,V)|Associates the specified value with the specified k
|java.util.TreeMap.putAll(Map<?extendsK,?extendsV>)|Copies all of the mappings 
|java.util.TreeMap.remove(Object)|Removes the mapping for this key from this Tr
|java.util.TreeMap.size()|Returns the number of key-value mappings in this map.
|java.util.TreeMap.subMap(K,boolean,K,boolean)|
|java.util.TreeMap.subMap(K,K)|
|java.util.TreeMap.tailMap(K)|
|java.util.TreeMap.tailMap(K,boolean)|
|java.util.TreeMap.values()|Returns aCollectionview of the values contained in 

*java.util.TreeMap_Description*

A Red-Black tree based (|java.util.NavigableMap|) implementation. The map is 
sorted according to the natural ordering(|java.lang.Comparable|) of its keys, 
or by a (|java.util.Comparator|) provided at map creation time, depending on 
which constructor is used. 

This implementation provides guaranteed log(n) time cost for the containsKey, 
get, put and remove operations. Algorithms are adaptations of those in Cormen, 
Leiserson, and Rivest's Introduction to Algorithms. 

Note that the ordering maintained by a sorted map (whether or not an explicit 
comparator is provided) must be consistent with equals if this sorted map is to 
correctly implement the Map interface. (See Comparable or Comparator for a 
precise definition of consistent with equals.) This is so because the Map 
interface is defined in terms of the equals operation, but a map performs all 
key comparisons using its compareTo (or compare) method, so two keys that are 
deemed equal by this method are, from the standpoint of the sorted map, equal. 
The behavior of a sorted map is well-defined even if its ordering is 
inconsistent with equals; it just fails to obey the general contract of the Map 
interface. 

Note that this implementation is not synchronized. If multiple threads access a 
map concurrently, and at least one of the threads modifies the map 
structurally, it must be synchronized externally. (A structural modification is 
any operation that adds or deletes one or more mappings; merely changing the 
value associated with an existing key is not a structural modification.) This 
is typically accomplished by synchronizing on some object that naturally 
encapsulates the map. If no such object exists, the map should be "wrapped" 
using the Collections.synchronizedSortedMap(|java.util.Collections|) method. 
This is best done at creation time, to prevent accidental unsynchronized access 
to the map: 

SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...)); 

The iterators returned by the iterator method of the collections returned by 
all of this class's "collection view methods" are fail-fast: if the map is 
structurally modified at any time after the iterator is created, in any way 
except through the iterator's own remove method, the iterator will throw a 
(|java.util.ConcurrentModificationException|) . Thus, in the face of concurrent 
modification, the iterator fails quickly and cleanly, rather than risking 
arbitrary, non-deterministic behavior at an undetermined time in the future. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators throw 
ConcurrentModificationException on a best-effort basis. Therefore, it would be 
wrong to write a program that depended on this exception for its correctness: 
the fail-fast behavior of iterators should be used only to detect bugs. 

All Map.Entry pairs returned by methods in this class and its views represent 
snapshots of mappings at the time they were produced. They do not support the 
Entry.setValue method. (Note however that it is possible to change mappings in 
the associated map using put.) 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.TreeMap()*

public TreeMap()

Constructs a new, empty tree map, using the natural ordering of its keys. All 
keys inserted into the map must implement the (|java.lang.Comparable|) 
interface. Furthermore, all such keys must be mutually comparable: 
k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in 
the map. If the user attempts to put a key into the map that violates this 
constraint (for example, the user attempts to put a string key into a map whose 
keys are integers), the put(Object key, Object value) call will throw a 
ClassCastException. 


*java.util.TreeMap(Comparator<?superK>)*

public TreeMap(java.util.Comparator<? super K> comparator)

Constructs a new, empty tree map, ordered according to the given comparator. 
All keys inserted into the map must be mutually comparable by the given 
comparator: comparator.compare(k1, k2) must not throw a ClassCastException for 
any keys k1 and k2 in the map. If the user attempts to put a key into the map 
that violates this constraint, the put(Object key, Object value) call will 
throw a ClassCastException. 

    comparator - the comparator that will be used to order this map. If null, the {@linkplain 
       Comparable natural ordering} of the keys will be used. 

*java.util.TreeMap(Map<?extendsK,?extendsV>)*

public TreeMap(java.util.Map<? extends K, ? extends V> m)

Constructs a new tree map containing the same mappings as the given map, 
ordered according to the natural ordering of its keys. All keys inserted into 
the new map must implement the (|java.lang.Comparable|) interface. Furthermore, 
all such keys must be mutually comparable: k1.compareTo(k2) must not throw a 
ClassCastException for any keys k1 and k2 in the map. This method runs in 
n*log(n) time. 

    m - the map whose mappings are to be placed in this map 

*java.util.TreeMap(SortedMap<K,?extendsV>)*

public TreeMap(java.util.SortedMap<K, ? extends V> m)

Constructs a new tree map containing the same mappings and using the same 
ordering as the specified sorted map. This method runs in linear time. 

    m - the sorted map whose mappings are to be placed in this map, and whose 
       comparator is to be used to sort this map 

*java.util.TreeMap.ceilingEntry(K)*

public |java.util.Map.Entry|<K,V> ceilingEntry(K key)





*java.util.TreeMap.ceilingKey(K)*

public |K| ceilingKey(K key)





*java.util.TreeMap.clear()*

public void clear()

Removes all of the mappings from this map. The map will be empty after this 
call returns. 



*java.util.TreeMap.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this TreeMap instance. (The keys and values 
themselves are not cloned.) 



    Returns: a shallow copy of this map 

*java.util.TreeMap.comparator()*

public |java.util.Comparator|<? super K> comparator()





*java.util.TreeMap.containsKey(Object)*

public boolean containsKey(java.lang.Object key)

Returns true if this map contains a mapping for the specified key. 


    key - key whose presence in this map is to be tested 

    Returns: true if this map contains a mapping for the specified key 

*java.util.TreeMap.containsValue(Object)*

public boolean containsValue(java.lang.Object value)

Returns true if this map maps one or more keys to the specified value. More 
formally, returns true if and only if this map contains at least one mapping to 
a value v such that (value==null ? v==null : value.equals(v)). This operation 
will probably require time linear in the map size for most implementations. 


    value - value whose presence in this map is to be tested 

    Returns: true if a mapping to value exists; false otherwise 

*java.util.TreeMap.descendingKeySet()*

public |java.util.NavigableSet|<K> descendingKeySet()





*java.util.TreeMap.descendingMap()*

public |java.util.NavigableMap|<K,V> descendingMap()





*java.util.TreeMap.entrySet()*

public |java.util.Set|<Entry<K,V>> entrySet()

Returns a (|java.util.Set|) view of the mappings contained in this map. The 
set's iterator returns the entries in ascending key order. The set is backed by 
the map, so changes to the map are reflected in the set, and vice-versa. If the 
map is modified while an iteration over the set is in progress (except through 
the iterator's own remove operation, or through the setValue operation on a map 
entry returned by the iterator) the results of the iteration are undefined. The 
set supports element removal, which removes the corresponding mapping from the 
map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear 
operations. It does not support the add or addAll operations. 



*java.util.TreeMap.firstEntry()*

public |java.util.Map.Entry|<K,V> firstEntry()





*java.util.TreeMap.firstKey()*

public |K| firstKey()





*java.util.TreeMap.floorEntry(K)*

public |java.util.Map.Entry|<K,V> floorEntry(K key)





*java.util.TreeMap.floorKey(K)*

public |K| floorKey(K key)





*java.util.TreeMap.get(Object)*

public |V| get(java.lang.Object key)

Returns the value to which the specified key is mapped, ornullif this map 
contains no mapping for the key. 

More formally, if this map contains a mapping from a keykto a valuevsuch 
thatkeycompares equal tokaccording to the map's ordering, then this method 
returnsv; otherwise it returnsnull. (There can be at most one such mapping.) 

A return value ofnulldoes not necessarily indicate that the map contains no 
mapping for the key; it's also possible that the map explicitly maps the key 
tonull. The containsKey(|java.util.TreeMap|) operation may be used to 
distinguish these two cases. 



*java.util.TreeMap.headMap(K)*

public |java.util.SortedMap|<K,V> headMap(K toKey)





*java.util.TreeMap.headMap(K,boolean)*

public |java.util.NavigableMap|<K,V> headMap(
  K toKey,
  boolean inclusive)





*java.util.TreeMap.higherEntry(K)*

public |java.util.Map.Entry|<K,V> higherEntry(K key)





*java.util.TreeMap.higherKey(K)*

public |K| higherKey(K key)





*java.util.TreeMap.keySet()*

public |java.util.Set|<K> keySet()

Returns a (|java.util.Set|) view of the keys contained in this map. The set's 
iterator returns the keys in ascending order. The set is backed by the map, so 
changes to the map are reflected in the set, and vice-versa. If the map is 
modified while an iteration over the set is in progress (except through the 
iterator's own remove operation), the results of the iteration are undefined. 
The set supports element removal, which removes the corresponding mapping from 
the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear 
operations. It does not support the add or addAll operations. 



*java.util.TreeMap.lastEntry()*

public |java.util.Map.Entry|<K,V> lastEntry()





*java.util.TreeMap.lastKey()*

public |K| lastKey()





*java.util.TreeMap.lowerEntry(K)*

public |java.util.Map.Entry|<K,V> lowerEntry(K key)





*java.util.TreeMap.lowerKey(K)*

public |K| lowerKey(K key)





*java.util.TreeMap.navigableKeySet()*

public |java.util.NavigableSet|<K> navigableKeySet()





*java.util.TreeMap.pollFirstEntry()*

public |java.util.Map.Entry|<K,V> pollFirstEntry()





*java.util.TreeMap.pollLastEntry()*

public |java.util.Map.Entry|<K,V> pollLastEntry()





*java.util.TreeMap.put(K,V)*

public |V| put(
  K key,
  V value)

Associates the specified value with the specified key in this map. If the map 
previously contained a mapping for the key, the old value is replaced. 


    key - key with which the specified value is to be associated 
    value - value to be associated with the specified key 

    Returns: the previous value associated with key, or null if there was no mapping for 
             key. (A null return can also indicate that the map previously 
             associated null with key.) 

*java.util.TreeMap.putAll(Map<?extendsK,?extendsV>)*

public void putAll(java.util.Map<? extends K, ? extends V> map)

Copies all of the mappings from the specified map to this map. These mappings 
replace any mappings that this map had for any of the keys currently in the 
specified map. 


    map - mappings to be stored in this map 

*java.util.TreeMap.remove(Object)*

public |V| remove(java.lang.Object key)

Removes the mapping for this key from this TreeMap if present. 


    key - key for which mapping should be removed 

    Returns: the previous value associated with key, or null if there was no mapping for 
             key. (A null return can also indicate that the map previously 
             associated null with key.) 

*java.util.TreeMap.size()*

public int size()

Returns the number of key-value mappings in this map. 



    Returns: the number of key-value mappings in this map 

*java.util.TreeMap.subMap(K,boolean,K,boolean)*

public |java.util.NavigableMap|<K,V> subMap(
  K fromKey,
  boolean fromInclusive,
  K toKey,
  boolean toInclusive)





*java.util.TreeMap.subMap(K,K)*

public |java.util.SortedMap|<K,V> subMap(
  K fromKey,
  K toKey)





*java.util.TreeMap.tailMap(K)*

public |java.util.SortedMap|<K,V> tailMap(K fromKey)





*java.util.TreeMap.tailMap(K,boolean)*

public |java.util.NavigableMap|<K,V> tailMap(
  K fromKey,
  boolean inclusive)





*java.util.TreeMap.values()*

public |java.util.Collection|<V> values()

Returns a (|java.util.Collection|) view of the values contained in this map. 
The collection's iterator returns the values in ascending order of the 
corresponding keys. The collection is backed by the map, so changes to the map 
are reflected in the collection, and vice-versa. If the map is modified while 
an iteration over the collection is in progress (except through the iterator's 
own remove operation), the results of the iteration are undefined. The 
collection supports element removal, which removes the corresponding mapping 
from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll 
and clear operations. It does not support the add or addAll operations. 




