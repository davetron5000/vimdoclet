*java.util.concurrent.ConcurrentSkipListSet* *ConcurrentSkipListSet* A scalable 

public class ConcurrentSkipListSet<E>
  extends    |java.util.AbstractSet|
  implements |java.util.NavigableSet|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.concurrent.ConcurrentSkipListSet_Description|
|java.util.concurrent.ConcurrentSkipListSet_Fields|
|java.util.concurrent.ConcurrentSkipListSet_Constructors|
|java.util.concurrent.ConcurrentSkipListSet_Methods|

================================================================================

*java.util.concurrent.ConcurrentSkipListSet_Constructors*
|java.util.concurrent.ConcurrentSkipListSet()|Constructs a new, empty set that 
|java.util.concurrent.ConcurrentSkipListSet(Collection<?extendsE>)|Constructs a
|java.util.concurrent.ConcurrentSkipListSet(Comparator<?superE>)|Constructs a n
|java.util.concurrent.ConcurrentSkipListSet(SortedSet<E>)|Constructs a new set 

*java.util.concurrent.ConcurrentSkipListSet_Methods*
|java.util.concurrent.ConcurrentSkipListSet.add(E)|Adds the specified element t
|java.util.concurrent.ConcurrentSkipListSet.ceiling(E)|
|java.util.concurrent.ConcurrentSkipListSet.clear()|Removes all of the elements
|java.util.concurrent.ConcurrentSkipListSet.clone()|Returns a shallow copy of t
|java.util.concurrent.ConcurrentSkipListSet.comparator()|
|java.util.concurrent.ConcurrentSkipListSet.contains(Object)|Returns true if th
|java.util.concurrent.ConcurrentSkipListSet.descendingIterator()|Returns an ite
|java.util.concurrent.ConcurrentSkipListSet.descendingSet()|Returns a reverse o
|java.util.concurrent.ConcurrentSkipListSet.equals(Object)|Compares the specifi
|java.util.concurrent.ConcurrentSkipListSet.first()|
|java.util.concurrent.ConcurrentSkipListSet.floor(E)|
|java.util.concurrent.ConcurrentSkipListSet.headSet(E)|
|java.util.concurrent.ConcurrentSkipListSet.headSet(E,boolean)|
|java.util.concurrent.ConcurrentSkipListSet.higher(E)|
|java.util.concurrent.ConcurrentSkipListSet.isEmpty()|Returns true if this set 
|java.util.concurrent.ConcurrentSkipListSet.iterator()|Returns an iterator over
|java.util.concurrent.ConcurrentSkipListSet.last()|
|java.util.concurrent.ConcurrentSkipListSet.lower(E)|
|java.util.concurrent.ConcurrentSkipListSet.pollFirst()|
|java.util.concurrent.ConcurrentSkipListSet.pollLast()|
|java.util.concurrent.ConcurrentSkipListSet.remove(Object)|Removes the specifie
|java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection<?>)|Removes fr
|java.util.concurrent.ConcurrentSkipListSet.size()|Returns the number of elemen
|java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)|
|java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)|
|java.util.concurrent.ConcurrentSkipListSet.tailSet(E)|
|java.util.concurrent.ConcurrentSkipListSet.tailSet(E,boolean)|

*java.util.concurrent.ConcurrentSkipListSet_Description*

A scalable concurrent (|java.util.NavigableSet|) implementation based on a 
(|java.util.concurrent.ConcurrentSkipListMap|) . The elements of the set are 
kept sorted according to their natural ordering(|java.lang.Comparable|) , or by 
a (|java.util.Comparator|) provided at set creation time, depending on which 
constructor is used. 

This implementation provides expected average log(n) time cost for the 
contains, add, and remove operations and their variants. Insertion, removal, 
and access operations safely execute concurrently by multiple threads. 
Iterators are weakly consistent, returning elements reflecting the state of the 
set at some point at or since the creation of the iterator. They do not throw 
(|java.util.ConcurrentModificationException|) , and may proceed concurrently 
with other operations. Ascending ordered views and their iterators are faster 
than descending ones. 

Beware that, unlike in most collections, the size method is not a constant-time 
operation. Because of the asynchronous nature of these sets, determining the 
current number of elements requires a traversal of the elements. Additionally, 
the bulk operations addAll, removeAll, retainAll, and containsAll are not 
guaranteed to be performed atomically. For example, an iterator operating 
concurrently with an addAll operation might view only some of the added 
elements. 

This class and its iterators implement all of the optional methods of the 
(|java.util.Set|) and (|java.util.Iterator|) interfaces. Like most other 
concurrent collection implementations, this class does not permit the use of 
null elements, because null arguments and return values cannot be reliably 
distinguished from the absence of elements. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.ConcurrentSkipListSet()*

public ConcurrentSkipListSet()

Constructs a new, empty set that orders its elements according to their natural 
ordering(|java.lang.Comparable|) . 


*java.util.concurrent.ConcurrentSkipListSet(Collection<?extendsE>)*

public ConcurrentSkipListSet(java.util.Collection<? extends E> c)

Constructs a new set containing the elements in the specified collection, that 
orders its elements according to their natural ordering(|java.lang.Comparable|) 
. 

    c - The elements that will comprise the new set 

*java.util.concurrent.ConcurrentSkipListSet(Comparator<?superE>)*

public ConcurrentSkipListSet(java.util.Comparator<? super E> comparator)

Constructs a new, empty set that orders its elements according to the specified 
comparator. 

    comparator - the comparator that will be used to order this set. If null, the {@linkplain 
       Comparable natural ordering} of the elements will be used. 

*java.util.concurrent.ConcurrentSkipListSet(SortedSet<E>)*

public ConcurrentSkipListSet(java.util.SortedSet<E> s)

Constructs a new set containing the same elements and using the same ordering 
as the specified sorted set. 

    s - sorted set whose elements will comprise the new set 

*java.util.concurrent.ConcurrentSkipListSet.add(E)*

public boolean add(E e)

Adds the specified element to this set if it is not already present. More 
formally, adds the specified element e to this set if the set contains no 
element e2 such that e.equals(e2). If this set already contains the element, 
the call leaves the set unchanged and returns false. 


    e - element to be added to this set 

    Returns: true if this set did not already contain the specified element 

*java.util.concurrent.ConcurrentSkipListSet.ceiling(E)*

public |E| ceiling(E e)





*java.util.concurrent.ConcurrentSkipListSet.clear()*

public void clear()

Removes all of the elements from this set. 



*java.util.concurrent.ConcurrentSkipListSet.clone()*

public |java.util.concurrent.ConcurrentSkipListSet|<E> clone()

Returns a shallow copy of this ConcurrentSkipListSet instance. (The elements 
themselves are not cloned.) 



    Returns: a shallow copy of this set 

*java.util.concurrent.ConcurrentSkipListSet.comparator()*

public |java.util.Comparator|<? super E> comparator()





*java.util.concurrent.ConcurrentSkipListSet.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this set contains the specified element. More formally, returns 
true if and only if this set contains an element e such that o.equals(e). 


    o - object to be checked for containment in this set 

    Returns: true if this set contains the specified element 

*java.util.concurrent.ConcurrentSkipListSet.descendingIterator()*

public |java.util.Iterator|<E> descendingIterator()

Returns an iterator over the elements in this set in descending order. 



    Returns: an iterator over the elements in this set in descending order 

*java.util.concurrent.ConcurrentSkipListSet.descendingSet()*

public |java.util.NavigableSet|<E> descendingSet()

Returns a reverse order view of the elements contained in this set. The 
descending set is backed by this set, so changes to the set are reflected in 
the descending set, and vice-versa. 

The returned set has an ordering equivalent to 
Collections.reverseOrder(|java.util.Collections|) (comparator()). The 
expressions.descendingSet().descendingSet()returns a view ofsessentially 
equivalent tos. 



    Returns: a reverse order view of this set 

*java.util.concurrent.ConcurrentSkipListSet.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this set for equality. Returns true if the 
specified object is also a set, the two sets have the same size, and every 
member of the specified set is contained in this set (or equivalently, every 
member of this set is contained in the specified set). This definition ensures 
that the equals method works properly across different implementations of the 
set interface. 


    o - the object to be compared for equality with this set 

    Returns: true if the specified object is equal to this set 

*java.util.concurrent.ConcurrentSkipListSet.first()*

public |E| first()





*java.util.concurrent.ConcurrentSkipListSet.floor(E)*

public |E| floor(E e)





*java.util.concurrent.ConcurrentSkipListSet.headSet(E)*

public |java.util.NavigableSet|<E> headSet(E toElement)





*java.util.concurrent.ConcurrentSkipListSet.headSet(E,boolean)*

public |java.util.NavigableSet|<E> headSet(
  E toElement,
  boolean inclusive)





*java.util.concurrent.ConcurrentSkipListSet.higher(E)*

public |E| higher(E e)





*java.util.concurrent.ConcurrentSkipListSet.isEmpty()*

public boolean isEmpty()

Returns true if this set contains no elements. 



    Returns: true if this set contains no elements 

*java.util.concurrent.ConcurrentSkipListSet.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this set in ascending order. 



    Returns: an iterator over the elements in this set in ascending order 

*java.util.concurrent.ConcurrentSkipListSet.last()*

public |E| last()





*java.util.concurrent.ConcurrentSkipListSet.lower(E)*

public |E| lower(E e)





*java.util.concurrent.ConcurrentSkipListSet.pollFirst()*

public |E| pollFirst()





*java.util.concurrent.ConcurrentSkipListSet.pollLast()*

public |E| pollLast()





*java.util.concurrent.ConcurrentSkipListSet.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the specified element from this set if it is present. More formally, 
removes an element e such that o.equals(e), if this set contains such an 
element. Returns true if this set contained the element (or equivalently, if 
this set changed as a result of the call). (This set will not contain the 
element once the call returns.) 


    o - object to be removed from this set, if present 

    Returns: true if this set contained the specified element 

*java.util.concurrent.ConcurrentSkipListSet.removeAll(Collection<?>)*

public boolean removeAll(java.util.Collection<?> c)

Removes from this set all of its elements that are contained in the specified 
collection. If the specified collection is also a set, this operation 
effectively modifies this set so that its value is the asymmetric set 
difference of the two sets. 


    c - collection containing elements to be removed from this set 

    Returns: true if this set changed as a result of the call 

*java.util.concurrent.ConcurrentSkipListSet.size()*

public int size()

Returns the number of elements in this set. If this set contains more than 
Integer.MAX_VALUE elements, it returns Integer.MAX_VALUE. 

Beware that, unlike in most collections, this method is NOT a constant-time 
operation. Because of the asynchronous nature of these sets, determining the 
current number of elements requires traversing them all to count them. 
Additionally, it is possible for the size to change during execution of this 
method, in which case the returned result will be inaccurate. Thus, this method 
is typically not very useful in concurrent applications. 



    Returns: the number of elements in this set 

*java.util.concurrent.ConcurrentSkipListSet.subSet(E,boolean,E,boolean)*

public |java.util.NavigableSet|<E> subSet(
  E fromElement,
  boolean fromInclusive,
  E toElement,
  boolean toInclusive)





*java.util.concurrent.ConcurrentSkipListSet.subSet(E,E)*

public |java.util.NavigableSet|<E> subSet(
  E fromElement,
  E toElement)





*java.util.concurrent.ConcurrentSkipListSet.tailSet(E)*

public |java.util.NavigableSet|<E> tailSet(E fromElement)





*java.util.concurrent.ConcurrentSkipListSet.tailSet(E,boolean)*

public |java.util.NavigableSet|<E> tailSet(
  E fromElement,
  boolean inclusive)






