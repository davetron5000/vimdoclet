*java.util.concurrent.locks.AbstractQueuedLongSynchronizer* *AbstractQueuedLongSynchronizer* 

public abstract class AbstractQueuedLongSynchronizer
  extends    |java.util.concurrent.locks.AbstractOwnableSynchronizer|
  implements |java.io.Serializable|

|java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Description|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Fields|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Constructors|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Methods|

================================================================================

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Constructors*
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer()|Creates a new Abst

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Methods*
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long)|Acquir
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long,long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads()|R
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength()|Ret
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState()|Returns t
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(AbstractQueuedLongSynchronizer.ConditionObject)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(AbstractQueuedLongSynchronizer.ConditionObject)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended()|Queri
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads()|Q
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(AbstractQueuedLongSynchronizer.ConditionObject)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(Thread)|Ret
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(AbstractQueuedLongSynchronizer.ConditionObject)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(long)|Releas
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long)|Sets 
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString()|Returns a
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(long)|Att
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(long,long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long,long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long)|Att
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long)|

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer_Description*

A version of (|java.util.concurrent.locks.AbstractQueuedSynchronizer|) in which 
synchronization state is maintained as a long. This class has exactly the same 
structure, properties, and methods as AbstractQueuedSynchronizer with the 
exception that all state-related parameters and results are defined as long 
rather than int. This class may be useful when creating synchronizers such as 
multilevel locks and barriers that require 64 bits of state. 

See (|java.util.concurrent.locks.AbstractQueuedSynchronizer|) for usage notes 
and examples. 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer()*

protected AbstractQueuedLongSynchronizer()

Creates a new AbstractQueuedLongSynchronizer instance with initial 
synchronization state of zero. 


*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquire(long)*

public final void acquire(long arg)

Acquires in exclusive mode, ignoring interrupts. Implemented by invoking at 
least once (|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , 
returning on success. Otherwise the thread is queued, possibly repeatedly 
blocking and unblocking, invoking 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) until success. 
This method can be used to implement method (|java.util.concurrent.locks.Lock|) 
. 


    arg - the acquire argument. This value is conveyed to {@link #tryAcquire} but is 
       otherwise uninterpreted and can represent anything you like. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireInterruptibly(long)*

public final void acquireInterruptibly(long arg)
  throws |java.lang.InterruptedException|
         
Acquires in exclusive mode, aborting if interrupted. Implemented by first 
checking interrupt status, then invoking at least once 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , returning on 
success. Otherwise the thread is queued, possibly repeatedly blocking and 
unblocking, invoking 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) until success or 
the thread is interrupted. This method can be used to implement method 
(|java.util.concurrent.locks.Lock|) . 


    arg - the acquire argument. This value is conveyed to {@link #tryAcquire} but is 
       otherwise uninterpreted and can represent anything you like. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireShared(long)*

public final void acquireShared(long arg)

Acquires in shared mode, ignoring interrupts. Implemented by first invoking at 
least once (|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , 
returning on success. Otherwise the thread is queued, possibly repeatedly 
blocking and unblocking, invoking 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) until success. 


    arg - the acquire argument. This value is conveyed to {@link #tryAcquireShared} but 
       is otherwise uninterpreted and can represent anything you like. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.acquireSharedInterruptibly(long)*

public final void acquireSharedInterruptibly(long arg)
  throws |java.lang.InterruptedException|
         
Acquires in shared mode, aborting if interrupted. Implemented by first checking 
interrupt status, then invoking at least once 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , returning on 
success. Otherwise the thread is queued, possibly repeatedly blocking and 
unblocking, invoking 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) until success or 
the thread is interrupted. 


    arg - the acquire argument. This value is conveyed to {@link #tryAcquireShared} but 
       is otherwise uninterpreted and can represent anything you like. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.compareAndSetState(long,long)*

protected final boolean compareAndSetState(
  long expect,
  long update)

Atomically sets synchronization state to the given updated value if the current 
state value equals the expected value. This operation has memory semantics of a 
volatile read and write. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal 
             to the expected value. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getExclusiveQueuedThreads()*

public final |java.util.Collection|<Thread> getExclusiveQueuedThreads()

Returns a collection containing threads that may be waiting to acquire in 
exclusive mode. This has the same properties as 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) except that it 
only returns those threads waiting due to an exclusive acquire. 



    Returns: the collection of threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getFirstQueuedThread()*

public final |java.lang.Thread| getFirstQueuedThread()

Returns the first (longest-waiting) thread in the queue, ornullif no threads 
are currently queued. 

In this implementation, this operation normally returns in constant time, but 
may iterate upon contention if other threads are concurrently modifying the 
queue. 



    Returns: the first (longest-waiting) thread in the queue, or {@code null} if no threads 
             are currently queued 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueuedThreads()*

public final |java.util.Collection|<Thread> getQueuedThreads()

Returns a collection containing threads that may be waiting to acquire. Because 
the actual set of threads may change dynamically while constructing this 
result, the returned collection is only a best-effort estimate. The elements of 
the returned collection are in no particular order. This method is designed to 
facilitate construction of subclasses that provide more extensive monitoring 
facilities. 



    Returns: the collection of threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getQueueLength()*

public final int getQueueLength()

Returns an estimate of the number of threads waiting to acquire. The value is 
only an estimate because the number of threads may change dynamically while 
this method traverses internal data structures. This method is designed for use 
in monitoring system state, not for synchronization control. 



    Returns: the estimated number of threads waiting to acquire 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getSharedQueuedThreads()*

public final |java.util.Collection|<Thread> getSharedQueuedThreads()

Returns a collection containing threads that may be waiting to acquire in 
shared mode. This has the same properties as 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) except that it 
only returns those threads waiting due to a shared acquire. 



    Returns: the collection of threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getState()*

protected final long getState()

Returns the current value of synchronization state. This operation has memory 
semantics of a volatile read. 



    Returns: current state value 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitingThreads(AbstractQueuedLongSynchronizer.ConditionObject)*

public final |java.util.Collection|<Thread> getWaitingThreads(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)

Returns a collection containing those threads that may be waiting on the given 
condition associated with this synchronizer. Because the actual set of threads 
may change dynamically while constructing this result, the returned collection 
is only a best-effort estimate. The elements of the returned collection are in 
no particular order. 


    condition - the condition 

    Returns: the collection of threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.getWaitQueueLength(AbstractQueuedLongSynchronizer.ConditionObject)*

public final int getWaitQueueLength(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)

Returns an estimate of the number of threads waiting on the given condition 
associated with this synchronizer. Note that because timeouts and interrupts 
may occur at any time, the estimate serves only as an upper bound on the actual 
number of waiters. This method is designed for use in monitoring of the system 
state, not for synchronization control. 


    condition - the condition 

    Returns: the estimated number of waiting threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasContended()*

public final boolean hasContended()

Queries whether any threads have ever contended to acquire this synchronizer; 
that is if an acquire method has ever blocked. 

In this implementation, this operation returns in constant time. 



    Returns: {@code true} if there has ever been contention 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasQueuedThreads()*

public final boolean hasQueuedThreads()

Queries whether any threads are waiting to acquire. Note that because 
cancellations due to interrupts and timeouts may occur at any time, atruereturn 
does not guarantee that any other thread will ever acquire. 

In this implementation, this operation returns in constant time. 



    Returns: {@code true} if there may be other threads waiting to acquire 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.hasWaiters(AbstractQueuedLongSynchronizer.ConditionObject)*

public final boolean hasWaiters(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)

Queries whether any threads are waiting on the given condition associated with 
this synchronizer. Note that because timeouts and interrupts may occur at any 
time, a true return does not guarantee that a future signal will awaken any 
threads. This method is designed primarily for use in monitoring of the system 
state. 


    condition - the condition 

    Returns: true if there are any waiting threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isHeldExclusively()*

protected boolean isHeldExclusively()

Returnstrueif synchronization is held exclusively with respect to the current 
(calling) thread. This method is invoked upon each call to a non-waiting 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
method. (Waiting methods instead invoke 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) .) 

The default implementation throws (|java.lang.UnsupportedOperationException|) . 
This method is invoked internally only within 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
methods, so need not be defined if conditions are not used. 



    Returns: {@code true} if synchronization is held exclusively; {@code false} otherwise 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.isQueued(Thread)*

public final boolean isQueued(java.lang.Thread thread)

Returns true if the given thread is currently queued. 

This implementation traverses the queue to determine presence of the given 
thread. 


    thread - the thread 

    Returns: {@code true} if the given thread is on the queue 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.owns(AbstractQueuedLongSynchronizer.ConditionObject)*

public final boolean owns(java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject condition)

Queries whether the given ConditionObject uses this synchronizer as its lock. 


    condition - the condition 

    Returns: true if owned 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.release(long)*

public final boolean release(long arg)

Releases in exclusive mode. Implemented by unblocking one or more threads if 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) returns true. 
This method can be used to implement method (|java.util.concurrent.locks.Lock|) 
. 


    arg - the release argument. This value is conveyed to {@link #tryRelease} but is 
       otherwise uninterpreted and can represent anything you like. 

    Returns: the value returned from {@link #tryRelease} 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.releaseShared(long)*

public final boolean releaseShared(long arg)

Releases in shared mode. Implemented by unblocking one or more threads if 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) returns true. 


    arg - the release argument. This value is conveyed to {@link #tryReleaseShared} but 
       is otherwise uninterpreted and can represent anything you like. 

    Returns: the value returned from {@link #tryReleaseShared} 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.setState(long)*

protected final void setState(long newState)

Sets the value of synchronization state. This operation has memory semantics of 
a volatile write. 


    newState - the new state value 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.toString()*

public |java.lang.String| toString()

Returns a string identifying this synchronizer, as well as its state. The 
state, in brackets, includes the String"State ="followed by the current value 
of (|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , and 
either"nonempty"or"empty"depending on whether the queue is empty. 



    Returns: a string identifying this synchronizer, as well as its state 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquire(long)*

protected boolean tryAcquire(long arg)

Attempts to acquire in exclusive mode. This method should query if the state of 
the object permits it to be acquired in the exclusive mode, and if so to 
acquire it. 

This method is always invoked by the thread performing acquire. If this method 
reports failure, the acquire method may queue the thread, if it is not already 
queued, until it is signalled by a release from some other thread. This can be 
used to implement method (|java.util.concurrent.locks.Lock|) . 

The default implementation throws (|java.lang.UnsupportedOperationException|) . 


    arg - the acquire argument. This value is always the one passed to an acquire method, 
       or is the value saved on entry to a condition wait. The value is 
       otherwise uninterpreted and can represent anything you like. 

    Returns: {@code true} if successful. Upon success, this object has been acquired. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireNanos(long,long)*

public final boolean tryAcquireNanos(
  long arg,
  long nanosTimeout)
  throws |java.lang.InterruptedException|
         
Attempts to acquire in exclusive mode, aborting if interrupted, and failing if 
the given timeout elapses. Implemented by first checking interrupt status, then 
invoking at least once 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , returning on 
success. Otherwise, the thread is queued, possibly repeatedly blocking and 
unblocking, invoking 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) until success or 
the thread is interrupted or the timeout elapses. This method can be used to 
implement method (|java.util.concurrent.locks.Lock|) . 


    arg - the acquire argument. This value is conveyed to {@link #tryAcquire} but is 
       otherwise uninterpreted and can represent anything you like. 
    nanosTimeout - the maximum number of nanoseconds to wait 

    Returns: {@code true} if acquired; {@code false} if timed out 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireShared(long)*

protected long tryAcquireShared(long arg)

Attempts to acquire in shared mode. This method should query if the state of 
the object permits it to be acquired in the shared mode, and if so to acquire 
it. 

This method is always invoked by the thread performing acquire. If this method 
reports failure, the acquire method may queue the thread, if it is not already 
queued, until it is signalled by a release from some other thread. 

The default implementation throws (|java.lang.UnsupportedOperationException|) . 


    arg - the acquire argument. This value is always the one passed to an acquire method, 
       or is the value saved on entry to a condition wait. The value is 
       otherwise uninterpreted and can represent anything you like. 

    Returns: a negative value on failure; zero if acquisition in shared mode succeeded but 
             no subsequent shared-mode acquire can succeed; and a positive 
             value if acquisition in shared mode succeeded and subsequent 
             shared-mode acquires might also succeed, in which case a 
             subsequent waiting thread must check availability. (Support for 
             three different return values enables this method to be used in 
             contexts where acquires only sometimes act exclusively.) Upon 
             success, this object has been acquired. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryAcquireSharedNanos(long,long)*

public final boolean tryAcquireSharedNanos(
  long arg,
  long nanosTimeout)
  throws |java.lang.InterruptedException|
         
Attempts to acquire in shared mode, aborting if interrupted, and failing if the 
given timeout elapses. Implemented by first checking interrupt status, then 
invoking at least once 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) , returning on 
success. Otherwise, the thread is queued, possibly repeatedly blocking and 
unblocking, invoking 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) until success or 
the thread is interrupted or the timeout elapses. 


    arg - the acquire argument. This value is conveyed to {@link #tryAcquireShared} but 
       is otherwise uninterpreted and can represent anything you like. 
    nanosTimeout - the maximum number of nanoseconds to wait 

    Returns: {@code true} if acquired; {@code false} if timed out 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryRelease(long)*

protected boolean tryRelease(long arg)

Attempts to set the state to reflect a release in exclusive mode. 

This method is always invoked by the thread performing release. 

The default implementation throws (|java.lang.UnsupportedOperationException|) . 


    arg - the release argument. This value is always the one passed to a release method, 
       or the current state value upon entry to a condition wait. The value is 
       otherwise uninterpreted and can represent anything you like. 

    Returns: {@code true} if this object is now in a fully released state, so that any 
             waiting threads may attempt to acquire; and {@code false} 
             otherwise. 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.tryReleaseShared(long)*

protected boolean tryReleaseShared(long arg)

Attempts to set the state to reflect a release in shared mode. 

This method is always invoked by the thread performing release. 

The default implementation throws (|java.lang.UnsupportedOperationException|) . 


    arg - the release argument. This value is always the one passed to a release method, 
       or the current state value upon entry to a condition wait. The value is 
       otherwise uninterpreted and can represent anything you like. 

    Returns: {@code true} if this release of shared mode may permit a waiting acquire 
             (shared or exclusive) to succeed; and {@code false} otherwise 


