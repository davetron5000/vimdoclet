*java.util.LinkedList* *LinkedList* Linked list implementation of the List inter

public class LinkedList<E>
  extends    |java.util.AbstractSequentialList|
  implements |java.util.List|
             |java.util.Deque|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.LinkedList_Description|
|java.util.LinkedList_Fields|
|java.util.LinkedList_Constructors|
|java.util.LinkedList_Methods|

================================================================================

*java.util.LinkedList_Constructors*
|java.util.LinkedList()|Constructs an empty list.
|java.util.LinkedList(Collection<?extendsE>)|Constructs a list containing the e

*java.util.LinkedList_Methods*
|java.util.LinkedList.add(E)|Appends the specified element to the end of this l
|java.util.LinkedList.add(int,E)|Inserts the specified element at the specified
|java.util.LinkedList.addAll(Collection<?extendsE>)|Appends all of the elements
|java.util.LinkedList.addAll(int,Collection<?extendsE>)|Inserts all of the elem
|java.util.LinkedList.addFirst(E)|Inserts the specified element at the beginnin
|java.util.LinkedList.addLast(E)|Appends the specified element to the end of th
|java.util.LinkedList.clear()|Removes all of the elements from this list.
|java.util.LinkedList.clone()|Returns a shallow copy of this LinkedList.
|java.util.LinkedList.contains(Object)|Returns true if this list contains the s
|java.util.LinkedList.descendingIterator()|
|java.util.LinkedList.element()|Retrieves, but does not remove, the head (first
|java.util.LinkedList.get(int)|Returns the element at the specified position in
|java.util.LinkedList.getFirst()|Returns the first element in this list.
|java.util.LinkedList.getLast()|Returns the last element in this list.
|java.util.LinkedList.indexOf(Object)|Returns the index of the first occurrence
|java.util.LinkedList.lastIndexOf(Object)|Returns the index of the last occurre
|java.util.LinkedList.listIterator(int)|Returns a list-iterator of the elements
|java.util.LinkedList.offer(E)|Adds the specified element as the tail (last ele
|java.util.LinkedList.offerFirst(E)|Inserts the specified element at the front 
|java.util.LinkedList.offerLast(E)|Inserts the specified element at the end of 
|java.util.LinkedList.peek()|Retrieves, but does not remove, the head (first el
|java.util.LinkedList.peekFirst()|Retrieves, but does not remove, the first ele
|java.util.LinkedList.peekLast()|Retrieves, but does not remove, the last eleme
|java.util.LinkedList.poll()|Retrieves and removes the head (first element) of 
|java.util.LinkedList.pollFirst()|Retrieves and removes the first element of th
|java.util.LinkedList.pollLast()|Retrieves and removes the last element of this
|java.util.LinkedList.pop()|Pops an element from the stack represented by this 
|java.util.LinkedList.push(E)|Pushes an element onto the stack represented by t
|java.util.LinkedList.remove()|Retrieves and removes the head (first element) o
|java.util.LinkedList.remove(int)|Removes the element at the specified position
|java.util.LinkedList.remove(Object)|Removes the first occurrence of the specif
|java.util.LinkedList.removeFirst()|Removes and returns the first element from 
|java.util.LinkedList.removeFirstOccurrence(Object)|Removes the first occurrenc
|java.util.LinkedList.removeLast()|Removes and returns the last element from th
|java.util.LinkedList.removeLastOccurrence(Object)|Removes the last occurrence 
|java.util.LinkedList.set(int,E)|Replaces the element at the specified position
|java.util.LinkedList.size()|Returns the number of elements in this list.
|java.util.LinkedList.toArray()|Returns an array containing all of the elements
|java.util.LinkedList.toArray(T[])|Returns an array containing all of the eleme

*java.util.LinkedList_Description*

Linked list implementation of the List interface. Implements all optional list 
operations, and permits all elements (including null). In addition to 
implementing the List interface, the LinkedList class provides uniformly named 
methods to get, remove and insert an element at the beginning and end of the 
list. These operations allow linked lists to be used as a stack, 
queue(|java.util.Queue|) , or double-ended queue(|java.util.Deque|) . 

The class implements the Deque interface, providing first-in-first-out queue 
operations for add, poll, along with other stack and deque operations. 

All of the operations perform as could be expected for a doubly-linked list. 
Operations that index into the list will traverse the list from the beginning 
or the end, whichever is closer to the specified index. 

Note that this implementation is not synchronized. If multiple threads access a 
linked list concurrently, and at least one of the threads modifies the list 
structurally, it must be synchronized externally. (A structural modification is 
any operation that adds or deletes one or more elements; merely setting the 
value of an element is not a structural modification.) This is typically 
accomplished by synchronizing on some object that naturally encapsulates the 
list. 

If no such object exists, the list should be "wrapped" using the 
Collections.synchronizedList(|java.util.Collections|) method. This is best done 
at creation time, to prevent accidental unsynchronized access to the list: 

List list = Collections.synchronizedList(new LinkedList(...)); 

The iterators returned by this class's iterator and listIterator methods are 
fail-fast: if the list is structurally modified at any time after the iterator 
is created, in any way except through the Iterator's own remove or add methods, 
the iterator will throw a (|java.util.ConcurrentModificationException|) . Thus, 
in the face of concurrent modification, the iterator fails quickly and cleanly, 
rather than risking arbitrary, non-deterministic behavior at an undetermined 
time in the future. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators throw 
ConcurrentModificationException on a best-effort basis. Therefore, it would be 
wrong to write a program that depended on this exception for its correctness: 
the fail-fast behavior of iterators should be used only to detect bugs. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.LinkedList()*

public LinkedList()

Constructs an empty list. 


*java.util.LinkedList(Collection<?extendsE>)*

public LinkedList(java.util.Collection<? extends E> c)

Constructs a list containing the elements of the specified collection, in the 
order they are returned by the collection's iterator. 

    c - the collection whose elements are to be placed into this list 

*java.util.LinkedList.add(E)*

public boolean add(E e)

Appends the specified element to the end of this list. 

This method is equivalent to (|java.util.LinkedList|) . 


    e - element to be appended to this list 

    Returns: true (as specified by {@link Collection#add}) 

*java.util.LinkedList.add(int,E)*

public void add(
  int index,
  E element)

Inserts the specified element at the specified position in this list. Shifts 
the element currently at that position (if any) and any subsequent elements to 
the right (adds one to their indices). 


    index - index at which the specified element is to be inserted 
    element - element to be inserted 

*java.util.LinkedList.addAll(Collection<?extendsE>)*

public boolean addAll(java.util.Collection<? extends E> c)

Appends all of the elements in the specified collection to the end of this 
list, in the order that they are returned by the specified collection's 
iterator. The behavior of this operation is undefined if the specified 
collection is modified while the operation is in progress. (Note that this will 
occur if the specified collection is this list, and it's nonempty.) 


    c - collection containing elements to be added to this list 

    Returns: true if this list changed as a result of the call 

*java.util.LinkedList.addAll(int,Collection<?extendsE>)*

public boolean addAll(
  int index,
  java.util.Collection<? extends E> c)

Inserts all of the elements in the specified collection into this list, 
starting at the specified position. Shifts the element currently at that 
position (if any) and any subsequent elements to the right (increases their 
indices). The new elements will appear in the list in the order that they are 
returned by the specified collection's iterator. 


    index - index at which to insert the first element from the specified collection 
    c - collection containing elements to be added to this list 

    Returns: true if this list changed as a result of the call 

*java.util.LinkedList.addFirst(E)*

public void addFirst(E e)

Inserts the specified element at the beginning of this list. 


    e - the element to add 

*java.util.LinkedList.addLast(E)*

public void addLast(E e)

Appends the specified element to the end of this list. 

This method is equivalent to (|java.util.LinkedList|) . 


    e - the element to add 

*java.util.LinkedList.clear()*

public void clear()

Removes all of the elements from this list. 



*java.util.LinkedList.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this LinkedList. (The elements themselves are not 
cloned.) 



    Returns: a shallow copy of this LinkedList instance 

*java.util.LinkedList.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this list contains the specified element. More formally, 
returns true if and only if this list contains at least one element e such that 
(o==null?e==null:o.equals(e)). 


    o - element whose presence in this list is to be tested 

    Returns: true if this list contains the specified element 

*java.util.LinkedList.descendingIterator()*

public |java.util.Iterator|<E> descendingIterator()





*java.util.LinkedList.element()*

public |E| element()

Retrieves, but does not remove, the head (first element) of this list. 



    Returns: the head of this list 

*java.util.LinkedList.get(int)*

public |E| get(int index)

Returns the element at the specified position in this list. 


    index - index of the element to return 

    Returns: the element at the specified position in this list 

*java.util.LinkedList.getFirst()*

public |E| getFirst()

Returns the first element in this list. 



    Returns: the first element in this list 

*java.util.LinkedList.getLast()*

public |E| getLast()

Returns the last element in this list. 



    Returns: the last element in this list 

*java.util.LinkedList.indexOf(Object)*

public int indexOf(java.lang.Object o)

Returns the index of the first occurrence of the specified element in this 
list, or -1 if this list does not contain the element. More formally, returns 
the lowest index i such that (o==null?get(i)==null:o.equals(get(i))), or -1 if 
there is no such index. 


    o - element to search for 

    Returns: the index of the first occurrence of the specified element in this list, or -1 
             if this list does not contain the element 

*java.util.LinkedList.lastIndexOf(Object)*

public int lastIndexOf(java.lang.Object o)

Returns the index of the last occurrence of the specified element in this list, 
or -1 if this list does not contain the element. More formally, returns the 
highest index i such that (o==null?get(i)==null:o.equals(get(i))), or -1 if 
there is no such index. 


    o - element to search for 

    Returns: the index of the last occurrence of the specified element in this list, or -1 
             if this list does not contain the element 

*java.util.LinkedList.listIterator(int)*

public |java.util.ListIterator|<E> listIterator(int index)

Returns a list-iterator of the elements in this list (in proper sequence), 
starting at the specified position in the list. Obeys the general contract of 
List.listIterator(int). 

The list-iterator is fail-fast: if the list is structurally modified at any 
time after the Iterator is created, in any way except through the 
list-iterator's own remove or add methods, the list-iterator will throw a 
ConcurrentModificationException. Thus, in the face of concurrent modification, 
the iterator fails quickly and cleanly, rather than risking arbitrary, 
non-deterministic behavior at an undetermined time in the future. 


    index - index of the first element to be returned from the list-iterator (by a call to 
       next) 

    Returns: a ListIterator of the elements in this list (in proper sequence), starting at 
             the specified position in the list 

*java.util.LinkedList.offer(E)*

public boolean offer(E e)

Adds the specified element as the tail (last element) of this list. 


    e - the element to add 

    Returns: true (as specified by {@link Queue#offer}) 

*java.util.LinkedList.offerFirst(E)*

public boolean offerFirst(E e)

Inserts the specified element at the front of this list. 


    e - the element to insert 

    Returns: true (as specified by {@link Deque#offerFirst}) 

*java.util.LinkedList.offerLast(E)*

public boolean offerLast(E e)

Inserts the specified element at the end of this list. 


    e - the element to insert 

    Returns: true (as specified by {@link Deque#offerLast}) 

*java.util.LinkedList.peek()*

public |E| peek()

Retrieves, but does not remove, the head (first element) of this list. 



    Returns: the head of this list, or null if this list is empty 

*java.util.LinkedList.peekFirst()*

public |E| peekFirst()

Retrieves, but does not remove, the first element of this list, or returns null 
if this list is empty. 



    Returns: the first element of this list, or null if this list is empty 

*java.util.LinkedList.peekLast()*

public |E| peekLast()

Retrieves, but does not remove, the last element of this list, or returns null 
if this list is empty. 



    Returns: the last element of this list, or null if this list is empty 

*java.util.LinkedList.poll()*

public |E| poll()

Retrieves and removes the head (first element) of this list 



    Returns: the head of this list, or null if this list is empty 

*java.util.LinkedList.pollFirst()*

public |E| pollFirst()

Retrieves and removes the first element of this list, or returns null if this 
list is empty. 



    Returns: the first element of this list, or null if this list is empty 

*java.util.LinkedList.pollLast()*

public |E| pollLast()

Retrieves and removes the last element of this list, or returns null if this 
list is empty. 



    Returns: the last element of this list, or null if this list is empty 

*java.util.LinkedList.pop()*

public |E| pop()

Pops an element from the stack represented by this list. In other words, 
removes and returns the first element of this list. 

This method is equivalent to (|java.util.LinkedList|) . 



    Returns: the element at the front of this list (which is the top of the stack 
             represented by this list) 

*java.util.LinkedList.push(E)*

public void push(E e)

Pushes an element onto the stack represented by this list. In other words, 
inserts the element at the front of this list. 

This method is equivalent to (|java.util.LinkedList|) . 


    e - the element to push 

*java.util.LinkedList.remove()*

public |E| remove()

Retrieves and removes the head (first element) of this list. 



    Returns: the head of this list 

*java.util.LinkedList.remove(int)*

public |E| remove(int index)

Removes the element at the specified position in this list. Shifts any 
subsequent elements to the left (subtracts one from their indices). Returns the 
element that was removed from the list. 


    index - the index of the element to be removed 

    Returns: the element previously at the specified position 

*java.util.LinkedList.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the first occurrence of the specified element from this list, if it is 
present. If this list does not contain the element, it is unchanged. More 
formally, removes the element with the lowest index i such that 
(o==null?get(i)==null:o.equals(get(i))) (if such an element exists). Returns 
true if this list contained the specified element (or equivalently, if this 
list changed as a result of the call). 


    o - element to be removed from this list, if present 

    Returns: true if this list contained the specified element 

*java.util.LinkedList.removeFirst()*

public |E| removeFirst()

Removes and returns the first element from this list. 



    Returns: the first element from this list 

*java.util.LinkedList.removeFirstOccurrence(Object)*

public boolean removeFirstOccurrence(java.lang.Object o)

Removes the first occurrence of the specified element in this list (when 
traversing the list from head to tail). If the list does not contain the 
element, it is unchanged. 


    o - element to be removed from this list, if present 

    Returns: true if the list contained the specified element 

*java.util.LinkedList.removeLast()*

public |E| removeLast()

Removes and returns the last element from this list. 



    Returns: the last element from this list 

*java.util.LinkedList.removeLastOccurrence(Object)*

public boolean removeLastOccurrence(java.lang.Object o)

Removes the last occurrence of the specified element in this list (when 
traversing the list from head to tail). If the list does not contain the 
element, it is unchanged. 


    o - element to be removed from this list, if present 

    Returns: true if the list contained the specified element 

*java.util.LinkedList.set(int,E)*

public |E| set(
  int index,
  E element)

Replaces the element at the specified position in this list with the specified 
element. 


    index - index of the element to replace 
    element - element to be stored at the specified position 

    Returns: the element previously at the specified position 

*java.util.LinkedList.size()*

public int size()

Returns the number of elements in this list. 



    Returns: the number of elements in this list 

*java.util.LinkedList.toArray()*

public |java.lang.Object|[] toArray()

Returns an array containing all of the elements in this list in proper sequence 
(from first to last element). 

The returned array will be "safe" in that no references to it are maintained by 
this list. (In other words, this method must allocate a new array). The caller 
is thus free to modify the returned array. 

This method acts as bridge between array-based and collection-based APIs. 



    Returns: an array containing all of the elements in this list in proper sequence 

*java.util.LinkedList.toArray(T[])*

public |T|[] toArray(T[] a)

Returns an array containing all of the elements in this list in proper sequence 
(from first to last element); the runtime type of the returned array is that of 
the specified array. If the list fits in the specified array, it is returned 
therein. Otherwise, a new array is allocated with the runtime type of the 
specified array and the size of this list. 

If the list fits in the specified array with room to spare (i.e., the array has 
more elements than the list), the element in the array immediately following 
the end of the list is set to null. (This is useful in determining the length 
of the list only if the caller knows that the list does not contain any null 
elements.) 

Like the (|java.util.LinkedList|) method, this method acts as bridge between 
array-based and collection-based APIs. Further, this method allows precise 
control over the runtime type of the output array, and may, under certain 
circumstances, be used to save allocation costs. 

Suppose x is a list known to contain only strings. The following code can be 
used to dump the list into a newly allocated array of String: 



String[] y = x.toArray(new String[0]); 

Note that toArray(new Object[0]) is identical in function to toArray(). 


    a - the array into which the elements of the list are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing the elements of the list 


