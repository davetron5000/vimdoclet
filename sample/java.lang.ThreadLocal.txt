*java.lang.ThreadLocal* *ThreadLocal* This class provides thread-local variables

public class ThreadLocal<T>
  extends    |java.lang.Object|

|java.lang.ThreadLocal_Description|
|java.lang.ThreadLocal_Fields|
|java.lang.ThreadLocal_Constructors|
|java.lang.ThreadLocal_Methods|

================================================================================

*java.lang.ThreadLocal_Constructors*
|java.lang.ThreadLocal()|Creates a thread local variable.

*java.lang.ThreadLocal_Methods*
|java.lang.ThreadLocal.get()|Returns the value in the current thread's copy of 
|java.lang.ThreadLocal.initialValue()|Returns the current thread's "initial val
|java.lang.ThreadLocal.remove()|Removes the current thread's value for this thr
|java.lang.ThreadLocal.set(T)|Sets the current thread's copy of this thread-loc

*java.lang.ThreadLocal_Description*

This class provides thread-local variables. These variables differ from their 
normal counterparts in that each thread that accesses one (via its get or set 
method) has its own, independently initialized copy of the variable. 
ThreadLocal instances are typically private static fields in classes that wish 
to associate state with a thread (e.g., a user ID or Transaction ID). 

For example, the class below generates unique identifiers local to each thread. 
A thread's id is assigned the first time it invokes 
UniqueThreadIdGenerator.getCurrentThreadId() and remains unchanged on 
subsequent calls. 

import java.util.concurrent.atomic.AtomicInteger; 

public class UniqueThreadIdGenerator { 

private static final AtomicInteger uniqueId = new AtomicInteger(0); 

private static final ThreadLocal < Integer > uniqueNum = new ThreadLocal < 
Integer > () { Override protected Integer initialValue() { return 
uniqueId.getAndIncrement(); } }; 

public static int getCurrentThreadId() { return uniqueId.get(); } } // 
UniqueThreadIdGenerator 

Each thread holds an implicit reference to its copy of a thread-local variable 
as long as the thread is alive and the ThreadLocal instance is accessible; 
after a thread goes away, all of its copies of thread-local instances are 
subject to garbage collection (unless other references to these copies exist). 



*java.lang.ThreadLocal()*

public ThreadLocal()

Creates a thread local variable. 


*java.lang.ThreadLocal.get()*

public |T| get()

Returns the value in the current thread's copy of this thread-local variable. 
If the variable has no value for the current thread, it is first initialized to 
the value returned by an invocation of the (|java.lang.ThreadLocal|) method. 



    Returns: the current thread's value of this thread-local 

*java.lang.ThreadLocal.initialValue()*

protected |T| initialValue()

Returns the current thread's "initial value" for this thread-local variable. 
This method will be invoked the first time a thread accesses the variable with 
the (|java.lang.ThreadLocal|) method, unless the thread previously invoked the 
(|java.lang.ThreadLocal|) method, in which case the initialValue method will 
not be invoked for the thread. Normally, this method is invoked at most once 
per thread, but it may be invoked again in case of subsequent invocations of 
(|java.lang.ThreadLocal|) followed by (|java.lang.ThreadLocal|) . 

This implementation simply returns null; if the programmer desires thread-local 
variables to have an initial value other than null, ThreadLocal must be 
subclassed, and this method overridden. Typically, an anonymous inner class 
will be used. 



    Returns: the initial value for this thread-local 

*java.lang.ThreadLocal.remove()*

public void remove()

Removes the current thread's value for this thread-local variable. If this 
thread-local variable is subsequently read(|java.lang.ThreadLocal|) by the 
current thread, its value will be reinitialized by invoking its 
(|java.lang.ThreadLocal|) method, unless its value is 
set(|java.lang.ThreadLocal|) by the current thread in the interim. This may 
result in multiple invocations of the initialValue method in the current 
thread. 



*java.lang.ThreadLocal.set(T)*

public void set(T value)

Sets the current thread's copy of this thread-local variable to the specified 
value. Most subclasses will have no need to override this method, relying 
solely on the (|java.lang.ThreadLocal|) method to set the values of 
thread-locals. 


    value - the value to be stored in the current thread's copy of this thread-local. 


