*java.util.AbstractMap* *AbstractMap* This class provides a skeletal implementat

public abstract class AbstractMap<K,V>
  extends    |java.lang.Object|
  implements |java.util.Map|

|java.util.AbstractMap_Description|
|java.util.AbstractMap_Fields|
|java.util.AbstractMap_Constructors|
|java.util.AbstractMap_Methods|

================================================================================

*java.util.AbstractMap_Constructors*
|java.util.AbstractMap()|Sole constructor.

*java.util.AbstractMap_Methods*
|java.util.AbstractMap.clear()|
|java.util.AbstractMap.clone()|Returns a shallow copy of this AbstractMap insta
|java.util.AbstractMap.containsKey(Object)|
|java.util.AbstractMap.containsValue(Object)|
|java.util.AbstractMap.entrySet()|
|java.util.AbstractMap.equals(Object)|Compares the specified object with this m
|java.util.AbstractMap.get(Object)|
|java.util.AbstractMap.hashCode()|Returns the hash code value for this map.
|java.util.AbstractMap.isEmpty()|
|java.util.AbstractMap.keySet()|
|java.util.AbstractMap.put(K,V)|
|java.util.AbstractMap.putAll(Map<?extendsK,?extendsV>)|
|java.util.AbstractMap.remove(Object)|
|java.util.AbstractMap.size()|
|java.util.AbstractMap.toString()|Returns a string representation of this map.
|java.util.AbstractMap.values()|

*java.util.AbstractMap_Description*

This class provides a skeletal implementation of the Map interface, to minimize 
the effort required to implement this interface. 

To implement an unmodifiable map, the programmer needs only to extend this 
class and provide an implementation for the entrySet method, which returns a 
set-view of the map's mappings. Typically, the returned set will, in turn, be 
implemented atop AbstractSet. This set should not support the add or remove 
methods, and its iterator should not support the remove method. 

To implement a modifiable map, the programmer must additionally override this 
class's put method (which otherwise throws an UnsupportedOperationException), 
and the iterator returned by entrySet().iterator() must additionally implement 
its remove method. 

The programmer should generally provide a void (no argument) and map 
constructor, as per the recommendation in the Map interface specification. 

The documentation for each non-abstract method in this class describes its 
implementation in detail. Each of these methods may be overridden if the map 
being implemented admits a more efficient implementation. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.AbstractMap()*

protected AbstractMap()

Sole constructor. (For invocation by subclass constructors, typically 
implicit.) 


*java.util.AbstractMap.clear()*

public void clear()

This implementation calls entrySet().clear(). 

Note that this implementation throws an UnsupportedOperationException if the 
entrySet does not support the clear operation. 



*java.util.AbstractMap.clone()*

protected |java.lang.Object| clone()
  throws |java.lang.CloneNotSupportedException|
         
Returns a shallow copy of this AbstractMap instance: the keys and values 
themselves are not cloned. 



    Returns: a shallow copy of this map 

*java.util.AbstractMap.containsKey(Object)*

public boolean containsKey(java.lang.Object key)

This implementation iterates over entrySet() searching for an entry with the 
specified key. If such an entry is found, true is returned. If the iteration 
terminates without finding such an entry, false is returned. Note that this 
implementation requires linear time in the size of the map; many 
implementations will override this method. 



*java.util.AbstractMap.containsValue(Object)*

public boolean containsValue(java.lang.Object value)

This implementation iterates over entrySet() searching for an entry with the 
specified value. If such an entry is found, true is returned. If the iteration 
terminates without finding such an entry, false is returned. Note that this 
implementation requires linear time in the size of the map. 



*java.util.AbstractMap.entrySet()*

public abstract |java.util.Set|<Entry<K,V>> entrySet()





*java.util.AbstractMap.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this map for equality. Returns true if the 
given object is also a map and the two maps represent the same mappings. More 
formally, two maps m1 and m2 represent the same mappings if 
m1.entrySet().equals(m2.entrySet()). This ensures that the equals method works 
properly across different implementations of the Map interface. 

This implementation first checks if the specified object is this map; if so it 
returns true. Then, it checks if the specified object is a map whose size is 
identical to the size of this map; if not, it returns false. If so, it iterates 
over this map's entrySet collection, and checks that the specified map contains 
each mapping that this map contains. If the specified map fails to contain such 
a mapping, false is returned. If the iteration completes, true is returned. 


    o - object to be compared for equality with this map 

    Returns: true if the specified object is equal to this map 

*java.util.AbstractMap.get(Object)*

public |V| get(java.lang.Object key)

This implementation iterates over entrySet() searching for an entry with the 
specified key. If such an entry is found, the entry's value is returned. If the 
iteration terminates without finding such an entry, null is returned. Note that 
this implementation requires linear time in the size of the map; many 
implementations will override this method. 



*java.util.AbstractMap.hashCode()*

public int hashCode()

Returns the hash code value for this map. The hash code of a map is defined to 
be the sum of the hash codes of each entry in the map's entrySet() view. This 
ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any 
two maps m1 and m2, as required by the general contract of (|java.lang.Object|) 
. 

This implementation iterates over entrySet(), calling 
hashCode()(|java.util.Map.Entry|) on each element (entry) in the set, and 
adding up the results. 



    Returns: the hash code value for this map 

*java.util.AbstractMap.isEmpty()*

public boolean isEmpty()

This implementation returns size() == 0. 



*java.util.AbstractMap.keySet()*

public |java.util.Set|<K> keySet()

This implementation returns a set that subclasses (|java.util.AbstractSet|) . 
The subclass's iterator method returns a "wrapper object" over this map's 
entrySet() iterator. The size method delegates to this map's size method and 
the contains method delegates to this map's containsKey method. 

The set is created the first time this method is called, and returned in 
response to all subsequent calls. No synchronization is performed, so there is 
a slight chance that multiple calls to this method will not all return the same 
set. 



*java.util.AbstractMap.put(K,V)*

public |V| put(
  K key,
  V value)

This implementation always throws an UnsupportedOperationException. 



*java.util.AbstractMap.putAll(Map<?extendsK,?extendsV>)*

public void putAll(java.util.Map<? extends K, ? extends V> m)

This implementation iterates over the specified map's entrySet() collection, 
and calls this map's put operation once for each entry returned by the 
iteration. 

Note that this implementation throws an UnsupportedOperationException if this 
map does not support the put operation and the specified map is nonempty. 



*java.util.AbstractMap.remove(Object)*

public |V| remove(java.lang.Object key)

This implementation iterates over entrySet() searching for an entry with the 
specified key. If such an entry is found, its value is obtained with its 
getValue operation, the entry is removed from the collection (and the backing 
map) with the iterator's remove operation, and the saved value is returned. If 
the iteration terminates without finding such an entry, null is returned. Note 
that this implementation requires linear time in the size of the map; many 
implementations will override this method. 

Note that this implementation throws an UnsupportedOperationException if the 
entrySet iterator does not support the remove method and this map contains a 
mapping for the specified key. 



*java.util.AbstractMap.size()*

public int size()

This implementation returns entrySet().size(). 



*java.util.AbstractMap.toString()*

public |java.lang.String| toString()

Returns a string representation of this map. The string representation consists 
of a list of key-value mappings in the order returned by the map's entrySet 
view's iterator, enclosed in braces ("{}"). Adjacent mappings are separated by 
the characters ", " (comma and space). Each key-value mapping is rendered as 
the key followed by an equals sign ("=") followed by the associated value. Keys 
and values are converted to strings as by (|java.lang.String|) . 



    Returns: a string representation of this map 

*java.util.AbstractMap.values()*

public |java.util.Collection|<V> values()

This implementation returns a collection that subclasses 
(|java.util.AbstractCollection|) . The subclass's iterator method returns a 
"wrapper object" over this map's entrySet() iterator. The size method delegates 
to this map's size method and the contains method delegates to this map's 
containsValue method. 

The collection is created the first time this method is called, and returned in 
response to all subsequent calls. No synchronization is performed, so there is 
a slight chance that multiple calls to this method will not all return the same 
collection. 




