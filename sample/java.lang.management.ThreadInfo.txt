*java.lang.management.ThreadInfo* *ThreadInfo* Thread information.

public class ThreadInfo
  extends    |java.lang.Object|

|java.lang.management.ThreadInfo_Description|
|java.lang.management.ThreadInfo_Fields|
|java.lang.management.ThreadInfo_Constructors|
|java.lang.management.ThreadInfo_Methods|

================================================================================

*java.lang.management.ThreadInfo_Methods*
|java.lang.management.ThreadInfo.from(CompositeData)|Returns a ThreadInfo objec
|java.lang.management.ThreadInfo.getBlockedCount()|Returns the total number of 
|java.lang.management.ThreadInfo.getBlockedTime()|Returns the approximate accum
|java.lang.management.ThreadInfo.getLockedMonitors()|Returns an array ofMonitor
|java.lang.management.ThreadInfo.getLockedSynchronizers()|Returns an array ofLo
|java.lang.management.ThreadInfo.getLockInfo()|Returns the LockInfo of an objec
|java.lang.management.ThreadInfo.getLockName()|Returns theLockInfo#toString str
|java.lang.management.ThreadInfo.getLockOwnerId()|Returns the ID of the thread 
|java.lang.management.ThreadInfo.getLockOwnerName()|Returns the name of the thr
|java.lang.management.ThreadInfo.getStackTrace()|Returns the stack trace of the
|java.lang.management.ThreadInfo.getThreadId()|Returns the ID of the thread ass
|java.lang.management.ThreadInfo.getThreadName()|Returns the name of the thread
|java.lang.management.ThreadInfo.getThreadState()|Returns the state of the thre
|java.lang.management.ThreadInfo.getWaitedCount()|Returns the total number of t
|java.lang.management.ThreadInfo.getWaitedTime()|Returns the approximate accumu
|java.lang.management.ThreadInfo.isInNative()|Tests if the thread associated wi
|java.lang.management.ThreadInfo.isSuspended()|Tests if the thread associated w
|java.lang.management.ThreadInfo.toString()|Returns a string representation of 

*java.lang.management.ThreadInfo_Description*

Thread information. ThreadInfo contains the information about a thread 
including: General thread information 

Thread ID. Name of the thread. 

Execution information 

Thread state. The object upon which the thread is blocked due to: 

waiting to enter a synchronization block/method, or waiting to be notified in a 
Object.wait(|java.lang.Object|) method, or parking due to a 
LockSupport.park(|java.util.concurrent.locks.LockSupport|) call. 

The ID of the thread that owns the object that the thread is blocked. Stack 
trace of the thread. List of object monitors locked by the thread. List of 
ownable synchronizers locked by the thread. 

Synchronization Statistics 

The number of times that the thread has blocked for synchronization or waited 
for notification. The accumulated elapsed time that the thread has blocked for 
synchronization or waited for notification since thread contention 
monitoring(|java.lang.management.ThreadMXBean|) was enabled. Some Java virtual 
machine implementation may not support this. The 
(|java.lang.management.ThreadMXBean|) method can be used to determine if a Java 
virtual machine supports this. 

This thread information class is designed for use in monitoring of the system, 
not for synchronization control. 

MXBean Mapping ThreadInfo is mapped to a 
CompositeData(|javax.management.openmbean.CompositeData|) with attributes as 
specified in the from(|java.lang.management.ThreadInfo|) method. 



*java.lang.management.ThreadInfo.from(CompositeData)*

public static |java.lang.management.ThreadInfo| from(javax.management.openmbean.CompositeData cd)

Returns a ThreadInfo object represented by the given CompositeData. The given 
CompositeData must contain the following attributes unless otherwise specified 
below: 



Attribute Name Type 

threadId java.lang.Long 

threadName java.lang.String 

threadState java.lang.String 

suspended java.lang.Boolean 

inNative java.lang.Boolean 

blockedCount java.lang.Long 

blockedTime java.lang.Long 

waitedCount java.lang.Long 

waitedTime java.lang.Long 

lockInfo javax.management.openmbean.CompositeData - the mapped type for 
(|java.lang.management.LockInfo|) as specified in the 

type mapping rules of MXBeans(|javax.management.MXBean|) . 

If cd does not contain this attribute, the LockInfo object will be constructed 
from the value of the lockName attribute. 

lockName java.lang.String 

lockOwnerId java.lang.Long 

lockOwnerName java.lang.String 

stackTrace javax.management.openmbean.CompositeData[] 

Each element is a CompositeData representing StackTraceElement containing the 
following attributes: 



Attribute Name Type 

className java.lang.String 

methodName java.lang.String 

fileName java.lang.String 

lineNumber java.lang.Integer 

nativeMethod java.lang.Boolean 





lockedMonitors javax.management.openmbean.CompositeData[] whose element type is 
the mapped type for (|java.lang.management.MonitorInfo|) as specified in the 
Monitor.from(|java.lang.management.MonitorInfo|) method. 

If cd does not contain this attribute, this attribute will be set to an empty 
array. 

lockedSynchronizers javax.management.openmbean.CompositeData[] whose element 
type is the mapped type for (|java.lang.management.LockInfo|) as specified in 
the 

type mapping rules of MXBeans(|javax.management.MXBean|) . 

If cd does not contain this attribute, this attribute will be set to an empty 
array. 




    cd - CompositeData representing a ThreadInfo 

    Returns: a ThreadInfo object represented by cd if cd is not null; null otherwise. 

*java.lang.management.ThreadInfo.getBlockedCount()*

public long getBlockedCount()

Returns the total number of times that the thread associated with this 
ThreadInfo blocked to enter or reenter a monitor. I.e. the number of times a 
thread has been in the BLOCKED(|java.lang.Thread.State|) state. 



    Returns: the total number of times that the thread entered the BLOCKED state. 

*java.lang.management.ThreadInfo.getBlockedTime()*

public long getBlockedTime()

Returns the approximate accumulated elapsed time (in milliseconds) that the 
thread associated with this ThreadInfo has blocked to enter or reenter a 
monitor since thread contention monitoring is enabled. I.e. the total 
accumulated time the thread has been in the BLOCKED(|java.lang.Thread.State|) 
state since thread contention monitoring was last enabled. This method returns 
-1 if thread contention monitoring is disabled. 

The Java virtual machine may measure the time with a high resolution timer. 
This statistic is reset when the thread contention monitoring is reenabled. 



    Returns: the approximate accumulated elapsed time in milliseconds that a thread entered 
             the BLOCKED state; -1 if thread contention monitoring is disabled. 

*java.lang.management.ThreadInfo.getLockedMonitors()*

public |java.lang.management.MonitorInfo|[] getLockedMonitors()

Returns an array of (|java.lang.management.MonitorInfo|) objects, each of which 
represents an object monitor currently locked by the thread associated with 
this ThreadInfo. If no locked monitor was requested for this thread info or no 
monitor is locked by the thread, this method will return a zero-length array. 



    Returns: an array of MonitorInfo objects representing the object monitors locked by the 
             thread. 

*java.lang.management.ThreadInfo.getLockedSynchronizers()*

public |java.lang.management.LockInfo|[] getLockedSynchronizers()

Returns an array of (|java.lang.management.LockInfo|) objects, each of which 
represents an ownable synchronizer currently locked by the thread associated 
with this ThreadInfo. If no locked synchronizer was requested for this thread 
info or no synchronizer is locked by the thread, this method will return a 
zero-length array. 



    Returns: an array of LockInfo objects representing the ownable synchronizers locked by 
             the thread. 

*java.lang.management.ThreadInfo.getLockInfo()*

public |java.lang.management.LockInfo| getLockInfo()

Returns the LockInfo of an object for which the thread associated with this 
ThreadInfo is blocked waiting. A thread can be blocked waiting for one of the 
following: 

an object monitor to be acquired for entering or reentering a synchronization 
block/method. The thread is in the BLOCKED(|java.lang.Thread.State|) state 
waiting to enter the synchronized statement or method. 

an object monitor to be notified by another thread. The thread is in the 
WAITING(|java.lang.Thread.State|) or TIMED_WAITING(|java.lang.Thread.State|) 
state due to a call to the Object.wait(|java.lang.Object|) method. 

a synchronization object responsible for the thread parking. The thread is in 
the WAITING(|java.lang.Thread.State|) or 
TIMED_WAITING(|java.lang.Thread.State|) state due to a call to the 
LockSupport.park(|java.util.concurrent.locks.LockSupport|) method. The 
synchronization object is the object returned from 
LockSupport.getBlocker(|java.util.concurrent.locks.LockSupport|) method. 
Typically it is an ownable synchronizer or a 
Condition(|java.util.concurrent.locks.Condition|) . 

This method returns null if the thread is not in any of the above conditions. 



    Returns: LockInfo of an object for which the thread is blocked waiting if any; null 
             otherwise. 

*java.lang.management.ThreadInfo.getLockName()*

public |java.lang.String| getLockName()

Returns the string representation(|java.lang.management.LockInfo|) of an object 
for which the thread associated with this ThreadInfo is blocked waiting. This 
method is equivalent to calling: 



getLockInfo().toString() 

This method will return null if this thread is not blocked waiting for any 
object or if the object is not owned by any thread. 



    Returns: the string representation of the object on which the thread is blocked if any; 
             null otherwise. 

*java.lang.management.ThreadInfo.getLockOwnerId()*

public long getLockOwnerId()

Returns the ID of the thread which owns the object for which the thread 
associated with this ThreadInfo is blocked waiting. This method will return -1 
if this thread is not blocked waiting for any object or if the object is not 
owned by any thread. 



    Returns: the thread ID of the owner thread of the object this thread is blocked on; -1 
             if this thread is not blocked or if the object lis not owned by 
             any thread. 

*java.lang.management.ThreadInfo.getLockOwnerName()*

public |java.lang.String| getLockOwnerName()

Returns the name of the thread which owns the object for which the thread 
associated with this ThreadInfo is blocked waiting. This method will return 
null if this thread is not blocked waiting for any object or if the object is 
not owned by any thread. 



    Returns: the name of the thread that owns the object this thread is blocked on; null if 
             this thread is not blocked or if the object is not owned by any 
             thread. 

*java.lang.management.ThreadInfo.getStackTrace()*

public |java.lang.StackTraceElement|[] getStackTrace()

Returns the stack trace of the thread associated with this ThreadInfo. If no 
stack trace was requested for this thread info, this method will return a 
zero-length array. If the returned array is of non-zero length then the first 
element of the array represents the top of the stack, which is the most recent 
method invocation in the sequence. The last element of the array represents the 
bottom of the stack, which is the least recent method invocation in the 
sequence. 

Some Java virtual machines may, under some circumstances, omit one or more 
stack frames from the stack trace. In the extreme case, a virtual machine that 
has no stack trace information concerning the thread associated with this 
ThreadInfo is permitted to return a zero-length array from this method. 



    Returns: an array of StackTraceElement objects of the thread. 

*java.lang.management.ThreadInfo.getThreadId()*

public long getThreadId()

Returns the ID of the thread associated with this ThreadInfo. 



    Returns: the ID of the associated thread. 

*java.lang.management.ThreadInfo.getThreadName()*

public |java.lang.String| getThreadName()

Returns the name of the thread associated with this ThreadInfo. 



    Returns: the name of the associated thread. 

*java.lang.management.ThreadInfo.getThreadState()*

public |java.lang.Thread.State| getThreadState()

Returns the state of the thread associated with this ThreadInfo. 



    Returns: Thread.State of the associated thread. 

*java.lang.management.ThreadInfo.getWaitedCount()*

public long getWaitedCount()

Returns the total number of times that the thread associated with this 
ThreadInfo waited for notification. I.e. the number of times that a thread has 
been in the WAITING(|java.lang.Thread.State|) or 
TIMED_WAITING(|java.lang.Thread.State|) state. 



    Returns: the total number of times that the thread was in the WAITING or TIMED_WAITING 
             state. 

*java.lang.management.ThreadInfo.getWaitedTime()*

public long getWaitedTime()

Returns the approximate accumulated elapsed time (in milliseconds) that the 
thread associated with this ThreadInfo has waited for notification since thread 
contention monitoring is enabled. I.e. the total accumulated time the thread 
has been in the WAITING(|java.lang.Thread.State|) or 
TIMED_WAITING(|java.lang.Thread.State|) state since thread contention 
monitoring is enabled. This method returns -1 if thread contention monitoring 
is disabled. 

The Java virtual machine may measure the time with a high resolution timer. 
This statistic is reset when the thread contention monitoring is reenabled. 



    Returns: the approximate accumulated elapsed time in milliseconds that a thread has been 
             in the WAITING or TIMED_WAITING state; -1 if thread contention 
             monitoring is disabled. 

*java.lang.management.ThreadInfo.isInNative()*

public boolean isInNative()

Tests if the thread associated with this ThreadInfo is executing native code 
via the Java Native Interface (JNI). The JNI native code does not include the 
virtual machine support code or the compiled native code generated by the 
virtual machine. 



    Returns: true if the thread is executing native code; false otherwise. 

*java.lang.management.ThreadInfo.isSuspended()*

public boolean isSuspended()

Tests if the thread associated with this ThreadInfo is suspended. This method 
returns true if (|java.lang.Thread|) has been called. 



    Returns: true if the thread is suspended; false otherwise. 

*java.lang.management.ThreadInfo.toString()*

public |java.lang.String| toString()

Returns a string representation of this thread info. The format of this string 
depends on the implementation. The returned string will typically include the 
thread name(|java.lang.management.ThreadInfo|) , the thread 
ID(|java.lang.management.ThreadInfo|) , its 
state(|java.lang.management.ThreadInfo|) , and a stack 
trace(|java.lang.management.ThreadInfo|) if any. 



    Returns: a string representation of this thread info. 


