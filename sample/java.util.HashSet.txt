*java.util.HashSet* *HashSet* This class implements the Set interface, backed by

public class HashSet<E>
  extends    |java.util.AbstractSet|
  implements |java.util.Set|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.HashSet_Description|
|java.util.HashSet_Fields|
|java.util.HashSet_Constructors|
|java.util.HashSet_Methods|

================================================================================

*java.util.HashSet_Constructors*
|java.util.HashSet()|Constructs a new, empty set; the backing HashMap instance 
|java.util.HashSet(Collection<?extendsE>)|Constructs a new set containing the e
|java.util.HashSet(int)|Constructs a new, empty set; the backing HashMap instan
|java.util.HashSet(int,float)|Constructs a new, empty set; the backing HashMap 

*java.util.HashSet_Methods*
|java.util.HashSet.add(E)|Adds the specified element to this set if it is not a
|java.util.HashSet.clear()|Removes all of the elements from this set.
|java.util.HashSet.clone()|Returns a shallow copy of this HashSet instance: the
|java.util.HashSet.contains(Object)|Returns true if this set contains the speci
|java.util.HashSet.isEmpty()|Returns true if this set contains no elements.
|java.util.HashSet.iterator()|Returns an iterator over the elements in this set
|java.util.HashSet.remove(Object)|Removes the specified element from this set i
|java.util.HashSet.size()|Returns the number of elements in this set (its cardi

*java.util.HashSet_Description*

This class implements the Set interface, backed by a hash table (actually a 
HashMap instance). It makes no guarantees as to the iteration order of the set; 
in particular, it does not guarantee that the order will remain constant over 
time. This class permits the null element. 

This class offers constant time performance for the basic operations (add, 
remove, contains and size), assuming the hash function disperses the elements 
properly among the buckets. Iterating over this set requires time proportional 
to the sum of the HashSet instance's size (the number of elements) plus the 
"capacity" of the backing HashMap instance (the number of buckets). Thus, it's 
very important not to set the initial capacity too high (or the load factor too 
low) if iteration performance is important. 

Note that this implementation is not synchronized. If multiple threads access a 
hash set concurrently, and at least one of the threads modifies the set, it 
must be synchronized externally. This is typically accomplished by 
synchronizing on some object that naturally encapsulates the set. 

If no such object exists, the set should be "wrapped" using the 
Collections.synchronizedSet(|java.util.Collections|) method. This is best done 
at creation time, to prevent accidental unsynchronized access to the set: 

Set s = Collections.synchronizedSet(new HashSet(...)); 

The iterators returned by this class's iterator method are fail-fast: if the 
set is modified at any time after the iterator is created, in any way except 
through the iterator's own remove method, the Iterator throws a 
(|java.util.ConcurrentModificationException|) . Thus, in the face of concurrent 
modification, the iterator fails quickly and cleanly, rather than risking 
arbitrary, non-deterministic behavior at an undetermined time in the future. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators throw 
ConcurrentModificationException on a best-effort basis. Therefore, it would be 
wrong to write a program that depended on this exception for its correctness: 
the fail-fast behavior of iterators should be used only to detect bugs. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.HashSet()*

public HashSet()

Constructs a new, empty set; the backing HashMap instance has default initial 
capacity (16) and load factor (0.75). 


*java.util.HashSet(Collection<?extendsE>)*

public HashSet(java.util.Collection<? extends E> c)

Constructs a new set containing the elements in the specified collection. The 
HashMap is created with default load factor (0.75) and an initial capacity 
sufficient to contain the elements in the specified collection. 

    c - the collection whose elements are to be placed into this set 

*java.util.HashSet(int)*

public HashSet(int initialCapacity)

Constructs a new, empty set; the backing HashMap instance has the specified 
initial capacity and default load factor (0.75). 

    initialCapacity - the initial capacity of the hash table 

*java.util.HashSet(int,float)*

public HashSet(
  int initialCapacity,
  float loadFactor)

Constructs a new, empty set; the backing HashMap instance has the specified 
initial capacity and the specified load factor. 

    initialCapacity - the initial capacity of the hash map 
    loadFactor - the load factor of the hash map 

*java.util.HashSet.add(E)*

public boolean add(E e)

Adds the specified element to this set if it is not already present. More 
formally, adds the specified element e to this set if this set contains no 
element e2 such that (e==null?e2==null:e.equals(e2)). If this set already 
contains the element, the call leaves the set unchanged and returns false. 


    e - element to be added to this set 

    Returns: true if this set did not already contain the specified element 

*java.util.HashSet.clear()*

public void clear()

Removes all of the elements from this set. The set will be empty after this 
call returns. 



*java.util.HashSet.clone()*

public |java.lang.Object| clone()

Returns a shallow copy of this HashSet instance: the elements themselves are 
not cloned. 



    Returns: a shallow copy of this set 

*java.util.HashSet.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this set contains the specified element. More formally, returns 
true if and only if this set contains an element e such that 
(o==null?e==null:o.equals(e)). 


    o - element whose presence in this set is to be tested 

    Returns: true if this set contains the specified element 

*java.util.HashSet.isEmpty()*

public boolean isEmpty()

Returns true if this set contains no elements. 



    Returns: true if this set contains no elements 

*java.util.HashSet.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this set. The elements are returned in 
no particular order. 



    Returns: an Iterator over the elements in this set 

*java.util.HashSet.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the specified element from this set if it is present. More formally, 
removes an element e such that (o==null?e==null:o.equals(e)), if this set 
contains such an element. Returns true if this set contained the element (or 
equivalently, if this set changed as a result of the call). (This set will not 
contain the element once the call returns.) 


    o - object to be removed from this set, if present 

    Returns: true if the set contained the specified element 

*java.util.HashSet.size()*

public int size()

Returns the number of elements in this set (its cardinality). 



    Returns: the number of elements in this set (its cardinality) 


