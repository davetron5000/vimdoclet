*java.util.concurrent.atomic.AtomicBoolean* *AtomicBoolean* Abooleanvalue that m

public class AtomicBoolean
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicBoolean_Description|
|java.util.concurrent.atomic.AtomicBoolean_Fields|
|java.util.concurrent.atomic.AtomicBoolean_Constructors|
|java.util.concurrent.atomic.AtomicBoolean_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicBoolean_Constructors*
|java.util.concurrent.atomic.AtomicBoolean()|Creates a newAtomicBooleanwith ini
|java.util.concurrent.atomic.AtomicBoolean(boolean)|Creates a newAtomicBooleanw

*java.util.concurrent.atomic.AtomicBoolean_Methods*
|java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)|Atomi
|java.util.concurrent.atomic.AtomicBoolean.get()|Returns the current value.
|java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean)|Atomically sets t
|java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean)|Eventually sets to 
|java.util.concurrent.atomic.AtomicBoolean.set(boolean)|Unconditionally sets to
|java.util.concurrent.atomic.AtomicBoolean.toString()|Returns the String repres
|java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean,boolean)|A

*java.util.concurrent.atomic.AtomicBoolean_Description*

Abooleanvalue that may be updated atomically. See the 
(|java.util.concurrent.atomic|) package specification for description of the 
properties of atomic variables. AnAtomicBooleanis used in applications such as 
atomically updated flags, and cannot be used as a replacement for a 
(|java.lang.Boolean|) . 



*java.util.concurrent.atomic.AtomicBoolean()*

public AtomicBoolean()

Creates a newAtomicBooleanwith initial valuefalse. 


*java.util.concurrent.atomic.AtomicBoolean(boolean)*

public AtomicBoolean(boolean initialValue)

Creates a newAtomicBooleanwith the given initial value. 

    initialValue - the initial value 

*java.util.concurrent.atomic.AtomicBoolean.compareAndSet(boolean,boolean)*

public final boolean compareAndSet(
  boolean expect,
  boolean update)

Atomically sets the value to the given updated value if the current value==the 
expected value. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal 
             to the expected value. 

*java.util.concurrent.atomic.AtomicBoolean.get()*

public final boolean get()

Returns the current value. 



    Returns: the current value 

*java.util.concurrent.atomic.AtomicBoolean.getAndSet(boolean)*

public final boolean getAndSet(boolean newValue)

Atomically sets to the given value and returns the previous value. 


    newValue - the new value 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicBoolean.lazySet(boolean)*

public final void lazySet(boolean newValue)

Eventually sets to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicBoolean.set(boolean)*

public final void set(boolean newValue)

Unconditionally sets to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicBoolean.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 



    Returns: the String representation of the current value. 

*java.util.concurrent.atomic.AtomicBoolean.weakCompareAndSet(boolean,boolean)*

public boolean weakCompareAndSet(
  boolean expect,
  boolean update)

Atomically sets the value to the given updated value if the current value==the 
expected value. 

May fail spuriously and does not provide ordering guarantees, so is only rarely 
an appropriate alternative tocompareAndSet. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


