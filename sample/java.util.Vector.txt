*java.util.Vector* *Vector* TheVectorclass implements a growable array of
 objec

public class Vector<E>
  extends    |java.util.AbstractList|
  implements |java.util.List|
             |java.util.RandomAccess|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.Vector_Description|
|java.util.Vector_Fields|
|java.util.Vector_Constructors|
|java.util.Vector_Methods|

================================================================================

*java.util.Vector_Fields*
|int_java.util.Vector.capacityIncrement|
|int_java.util.Vector.elementCount|
|java.lang.Object[]_java.util.Vector.elementData|

*java.util.Vector_Constructors*
|java.util.Vector()|Constructs an empty vector so that its internal data array 
|java.util.Vector(Collection<?extendsE>)|Constructs a vector containing the ele
|java.util.Vector(int)|Constructs an empty vector with the specified initial ca
|java.util.Vector(int,int)|Constructs an empty vector with the specified initia

*java.util.Vector_Methods*
|java.util.Vector.add(E)|Appends the specified element to the end of this Vecto
|java.util.Vector.add(int,E)|Inserts the specified element at the specified pos
|java.util.Vector.addAll(Collection<?extendsE>)|Appends all of the elements in 
|java.util.Vector.addAll(int,Collection<?extendsE>)|Inserts all of the elements
|java.util.Vector.addElement(E)|Adds the specified component to the end of this
|java.util.Vector.capacity()|Returns the current capacity of this vector.
|java.util.Vector.clear()|Removes all of the elements from this Vector.
|java.util.Vector.clone()|Returns a clone of this vector.
|java.util.Vector.contains(Object)|Returnstrueif this vector contains the speci
|java.util.Vector.containsAll(Collection<?>)|Returns true if this Vector contai
|java.util.Vector.copyInto(Object[])|Copies the components of this vector into 
|java.util.Vector.elementAt(int)|Returns the component at the specified index.
|java.util.Vector.elements()|Returns an enumeration of the components of this v
|java.util.Vector.ensureCapacity(int)|Increases the capacity of this vector, if
|java.util.Vector.equals(Object)|Compares the specified Object with this Vector
|java.util.Vector.firstElement()|Returns the first component (the item at index
|java.util.Vector.get(int)|Returns the element at the specified position in thi
|java.util.Vector.hashCode()|Returns the hash code value for this Vector.
|java.util.Vector.indexOf(Object)|Returns the index of the first occurrence of 
|java.util.Vector.indexOf(Object,int)|Returns the index of the first occurrence
|java.util.Vector.insertElementAt(E,int)|Inserts the specified object as a comp
|java.util.Vector.isEmpty()|Tests if this vector has no components.
|java.util.Vector.lastElement()|Returns the last component of the vector.
|java.util.Vector.lastIndexOf(Object)|Returns the index of the last occurrence 
|java.util.Vector.lastIndexOf(Object,int)|Returns the index of the last occurre
|java.util.Vector.remove(int)|Removes the element at the specified position in 
|java.util.Vector.remove(Object)|Removes the first occurrence of the specified 
|java.util.Vector.removeAll(Collection<?>)|Removes from this Vector all of its 
|java.util.Vector.removeAllElements()|Removes all components from this vector a
|java.util.Vector.removeElement(Object)|Removes the first (lowest-indexed) occu
|java.util.Vector.removeElementAt(int)|Deletes the component at the specified i
|java.util.Vector.removeRange(int,int)|Removes from this List all of the elemen
|java.util.Vector.retainAll(Collection<?>)|Retains only the elements in this Ve
|java.util.Vector.set(int,E)|Replaces the element at the specified position in 
|java.util.Vector.setElementAt(E,int)|Sets the component at the specifiedindexo
|java.util.Vector.setSize(int)|Sets the size of this vector.
|java.util.Vector.size()|Returns the number of components in this vector.
|java.util.Vector.subList(int,int)|Returns a view of the portion of this List b
|java.util.Vector.toArray()|Returns an array containing all of the elements in 
|java.util.Vector.toArray(T[])|Returns an array containing all of the elements 
|java.util.Vector.toString()|Returns a string representation of this Vector, co
|java.util.Vector.trimToSize()|Trims the capacity of this vector to be the vect

*java.util.Vector_Description*

TheVectorclass implements a growable array of objects. Like an array, it 
contains components that can be accessed using an integer index. However, the 
size of aVectorcan grow or shrink as needed to accommodate adding and removing 
items after theVectorhas been created. 

Each vector tries to optimize storage management by maintaining acapacityand 
acapacityIncrement. Thecapacityis always at least as large as the vector size; 
it is usually larger because as components are added to the vector, the 
vector's storage increases in chunks the size ofcapacityIncrement. An 
application can increase the capacity of a vector before inserting a large 
number of components; this reduces the amount of incremental reallocation. 

The Iterators returned by Vector's iterator and listIterator methods are 
fail-fast: if the Vector is structurally modified at any time after the 
Iterator is created, in any way except through the Iterator's own remove or add 
methods, the Iterator will throw a ConcurrentModificationException. Thus, in 
the face of concurrent modification, the Iterator fails quickly and cleanly, 
rather than risking arbitrary, non-deterministic behavior at an undetermined 
time in the future. The Enumerations returned by Vector's elements method are 
not fail-fast. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators 
throwConcurrentModificationExceptionon a best-effort basis. Therefore, it would 
be wrong to write a program that depended on this exception for its 
correctness: the fail-fast behavior of iterators should be used only to detect 
bugs. 

As of the Java 2 platform v1.2, this class was retrofitted to implement the 
(|java.util.List|) interface, making it a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 
Unlike the new collection implementations,Vectoris synchronized. 



*int_java.util.Vector.capacityIncrement*

The amount by which the capacity of the vector is automatically incremented 
when its size becomes greater than its capacity. If the capacity increment is 
less than or equal to zero, the capacity of the vector is doubled each time it 
needs to grow. 


*int_java.util.Vector.elementCount*

The number of valid components in thisVectorobject. 
ComponentselementData[0]throughelementData[elementCount-1]are the actual items. 


*java.lang.Object[]_java.util.Vector.elementData*

The array buffer into which the components of the vector are stored. The 
capacity of the vector is the length of this array buffer, and is at least 
large enough to contain all the vector's elements. 

Any array elements following the last element in the Vector are null. 



*java.util.Vector()*

public Vector()

Constructs an empty vector so that its internal data array has size10and its 
standard capacity increment is zero. 


*java.util.Vector(Collection<?extendsE>)*

public Vector(java.util.Collection<? extends E> c)

Constructs a vector containing the elements of the specified collection, in the 
order they are returned by the collection's iterator. 

    c - the collection whose elements are to be placed into this vector 

*java.util.Vector(int)*

public Vector(int initialCapacity)

Constructs an empty vector with the specified initial capacity and with its 
capacity increment equal to zero. 

    initialCapacity - the initial capacity of the vector 

*java.util.Vector(int,int)*

public Vector(
  int initialCapacity,
  int capacityIncrement)

Constructs an empty vector with the specified initial capacity and capacity 
increment. 

    initialCapacity - the initial capacity of the vector 
    capacityIncrement - the amount by which the capacity is increased when the vector overflows 

*java.util.Vector.add(E)*

public synchronized boolean add(E e)

Appends the specified element to the end of this Vector. 


    e - element to be appended to this Vector 

    Returns: {@code true} (as specified by {@link Collection#add}) 

*java.util.Vector.add(int,E)*

public void add(
  int index,
  E element)

Inserts the specified element at the specified position in this Vector. Shifts 
the element currently at that position (if any) and any subsequent elements to 
the right (adds one to their indices). 


    index - index at which the specified element is to be inserted 
    element - element to be inserted 

*java.util.Vector.addAll(Collection<?extendsE>)*

public synchronized boolean addAll(java.util.Collection<? extends E> c)

Appends all of the elements in the specified Collection to the end of this 
Vector, in the order that they are returned by the specified Collection's 
Iterator. The behavior of this operation is undefined if the specified 
Collection is modified while the operation is in progress. (This implies that 
the behavior of this call is undefined if the specified Collection is this 
Vector, and this Vector is nonempty.) 


    c - elements to be inserted into this Vector 

    Returns: {@code true} if this Vector changed as a result of the call 

*java.util.Vector.addAll(int,Collection<?extendsE>)*

public synchronized boolean addAll(
  int index,
  java.util.Collection<? extends E> c)

Inserts all of the elements in the specified Collection into this Vector at the 
specified position. Shifts the element currently at that position (if any) and 
any subsequent elements to the right (increases their indices). The new 
elements will appear in the Vector in the order that they are returned by the 
specified Collection's iterator. 


    index - index at which to insert the first element from the specified collection 
    c - elements to be inserted into this Vector 

    Returns: {@code true} if this Vector changed as a result of the call 

*java.util.Vector.addElement(E)*

public synchronized void addElement(E obj)

Adds the specified component to the end of this vector, increasing its size by 
one. The capacity of this vector is increased if its size becomes greater than 
its capacity. 

This method is identical in functionality to the add(E)(|java.util.Vector|) 
method (which is part of the (|java.util.List|) interface). 


    obj - the component to be added 

*java.util.Vector.capacity()*

public synchronized int capacity()

Returns the current capacity of this vector. 



    Returns: the current capacity (the length of its internal data array, kept in the field 
             {@code elementData} of this vector) 

*java.util.Vector.clear()*

public void clear()

Removes all of the elements from this Vector. The Vector will be empty after 
this call returns (unless it throws an exception). 



*java.util.Vector.clone()*

public synchronized |java.lang.Object| clone()

Returns a clone of this vector. The copy will contain a reference to a clone of 
the internal data array, not a reference to the original internal data array of 
thisVectorobject. 



    Returns: a clone of this vector 

*java.util.Vector.contains(Object)*

public boolean contains(java.lang.Object o)

Returnstrueif this vector contains the specified element. More formally, 
returnstrueif and only if this vector contains at least one elementesuch that 
(o==null?e==null:o.equals(e)). 


    o - element whose presence in this vector is to be tested 

    Returns: {@code true} if this vector contains the specified element 

*java.util.Vector.containsAll(Collection<?>)*

public synchronized boolean containsAll(java.util.Collection<?> c)

Returns true if this Vector contains all of the elements in the specified 
Collection. 


    c - a collection whose elements will be tested for containment in this Vector 

    Returns: true if this Vector contains all of the elements in the specified collection 

*java.util.Vector.copyInto(Object[])*

public synchronized void copyInto(java.lang.Object[] anArray)

Copies the components of this vector into the specified array. The item at 
indexkin this vector is copied into componentkofanArray. 


    anArray - the array into which the components get copied 

*java.util.Vector.elementAt(int)*

public synchronized |E| elementAt(int index)

Returns the component at the specified index. 

This method is identical in functionality to the (|java.util.Vector|) method 
(which is part of the (|java.util.List|) interface). 


    index - an index into this vector 

    Returns: the component at the specified index 

*java.util.Vector.elements()*

public |java.util.Enumeration|<E> elements()

Returns an enumeration of the components of this vector. The 
returnedEnumerationobject will generate all items in this vector. The first 
item generated is the item at index0, then the item at index1, and so on. 



    Returns: an enumeration of the components of this vector 

*java.util.Vector.ensureCapacity(int)*

public synchronized void ensureCapacity(int minCapacity)

Increases the capacity of this vector, if necessary, to ensure that it can hold 
at least the number of components specified by the minimum capacity argument. 

If the current capacity of this vector is less thanminCapacity, then its 
capacity is increased by replacing its internal data array, kept in the 
fieldelementData, with a larger one. The size of the new data array will be the 
old size pluscapacityIncrement, unless the value ofcapacityIncrementis less 
than or equal to zero, in which case the new capacity will be twice the old 
capacity; but if this new size is still smaller thanminCapacity, then the new 
capacity will beminCapacity. 


    minCapacity - the desired minimum capacity 

*java.util.Vector.equals(Object)*

public synchronized boolean equals(java.lang.Object o)

Compares the specified Object with this Vector for equality. Returns true if 
and only if the specified Object is also a List, both Lists have the same size, 
and all corresponding pairs of elements in the two Lists are equal. (Two 
elementse1ande2are equal if(e1==null ? e2==null : e1.equals(e2)).) In other 
words, two Lists are defined to be equal if they contain the same elements in 
the same order. 


    o - the Object to be compared for equality with this Vector 

    Returns: true if the specified Object is equal to this Vector 

*java.util.Vector.firstElement()*

public synchronized |E| firstElement()

Returns the first component (the item at index0) of this vector. 



    Returns: the first component of this vector 

*java.util.Vector.get(int)*

public synchronized |E| get(int index)

Returns the element at the specified position in this Vector. 


    index - index of the element to return 

    Returns: object at the specified index 

*java.util.Vector.hashCode()*

public synchronized int hashCode()

Returns the hash code value for this Vector. 



*java.util.Vector.indexOf(Object)*

public int indexOf(java.lang.Object o)

Returns the index of the first occurrence of the specified element in this 
vector, or -1 if this vector does not contain the element. More formally, 
returns the lowest indexisuch that (o==null?get(i)==null:o.equals(get(i))), or 
-1 if there is no such index. 


    o - element to search for 

    Returns: the index of the first occurrence of the specified element in this vector, or 
             -1 if this vector does not contain the element 

*java.util.Vector.indexOf(Object,int)*

public synchronized int indexOf(
  java.lang.Object o,
  int index)

Returns the index of the first occurrence of the specified element in this 
vector, searching forwards fromindex, or returns -1 if the element is not 
found. More formally, returns the lowest indexisuch that (i>=index and and 
(o==null?get(i)==null:o.equals(get(i)))), or -1 if there is no such index. 


    o - element to search for 
    index - index to start searching from 

    Returns: the index of the first occurrence of the element in this vector at position 
             {@code index} or later in the vector; {@code -1} if the element is 
             not found. 

*java.util.Vector.insertElementAt(E,int)*

public synchronized void insertElementAt(
  E obj,
  int index)

Inserts the specified object as a component in this vector at the 
specifiedindex. Each component in this vector with an index greater or equal to 
the specifiedindexis shifted upward to have an index one greater than the value 
it had previously. 

The index must be a value greater than or equal to0and less than or equal to 
the current size of the vector. (If the index is equal to the current size of 
the vector, the new element is appended to the Vector.) 

This method is identical in functionality to the add(int, 
E)(|java.util.Vector|) method (which is part of the (|java.util.List|) 
interface). Note that theaddmethod reverses the order of the parameters, to 
more closely match array usage. 


    obj - the component to insert 
    index - where to insert the new component 

*java.util.Vector.isEmpty()*

public synchronized boolean isEmpty()

Tests if this vector has no components. 



    Returns: {@code true} if and only if this vector has no components, that is, its size is 
             zero; {@code false} otherwise. 

*java.util.Vector.lastElement()*

public synchronized |E| lastElement()

Returns the last component of the vector. 



    Returns: the last component of the vector, i.e., the component at index size()-1. 

*java.util.Vector.lastIndexOf(Object)*

public synchronized int lastIndexOf(java.lang.Object o)

Returns the index of the last occurrence of the specified element in this 
vector, or -1 if this vector does not contain the element. More formally, 
returns the highest indexisuch that (o==null?get(i)==null:o.equals(get(i))), or 
-1 if there is no such index. 


    o - element to search for 

    Returns: the index of the last occurrence of the specified element in this vector, or -1 
             if this vector does not contain the element 

*java.util.Vector.lastIndexOf(Object,int)*

public synchronized int lastIndexOf(
  java.lang.Object o,
  int index)

Returns the index of the last occurrence of the specified element in this 
vector, searching backwards fromindex, or returns -1 if the element is not 
found. More formally, returns the highest indexisuch that (i<=index and and 
(o==null?get(i)==null:o.equals(get(i)))), or -1 if there is no such index. 


    o - element to search for 
    index - index to start searching backwards from 

    Returns: the index of the last occurrence of the element at position less than or equal 
             to {@code index} in this vector; -1 if the element is not found. 

*java.util.Vector.remove(int)*

public synchronized |E| remove(int index)

Removes the element at the specified position in this Vector. Shifts any 
subsequent elements to the left (subtracts one from their indices). Returns the 
element that was removed from the Vector. 


    index - the index of the element to be removed 

    Returns: element that was removed 

*java.util.Vector.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the first occurrence of the specified element in this Vector If the 
Vector does not contain the element, it is unchanged. More formally, removes 
the element with the lowest index i such that(o==null ? get(i)==null : 
o.equals(get(i)))(if such an element exists). 


    o - element to be removed from this Vector, if present 

    Returns: true if the Vector contained the specified element 

*java.util.Vector.removeAll(Collection<?>)*

public synchronized boolean removeAll(java.util.Collection<?> c)

Removes from this Vector all of its elements that are contained in the 
specified Collection. 


    c - a collection of elements to be removed from the Vector 

    Returns: true if this Vector changed as a result of the call 

*java.util.Vector.removeAllElements()*

public synchronized void removeAllElements()

Removes all components from this vector and sets its size to zero. 

This method is identical in functionality to the (|java.util.Vector|) method 
(which is part of the (|java.util.List|) interface). 



*java.util.Vector.removeElement(Object)*

public synchronized boolean removeElement(java.lang.Object obj)

Removes the first (lowest-indexed) occurrence of the argument from this vector. 
If the object is found in this vector, each component in the vector with an 
index greater or equal to the object's index is shifted downward to have an 
index one smaller than the value it had previously. 

This method is identical in functionality to the (|java.util.Vector|) method 
(which is part of the (|java.util.List|) interface). 


    obj - the component to be removed 

    Returns: {@code true} if the argument was a component of this vector; {@code false} 
             otherwise. 

*java.util.Vector.removeElementAt(int)*

public synchronized void removeElementAt(int index)

Deletes the component at the specified index. Each component in this vector 
with an index greater or equal to the specifiedindexis shifted downward to have 
an index one smaller than the value it had previously. The size of this vector 
is decreased by1. 

The index must be a value greater than or equal to0and less than the current 
size of the vector. 

This method is identical in functionality to the (|java.util.Vector|) method 
(which is part of the (|java.util.List|) interface). Note that theremovemethod 
returns the old value that was stored at the specified position. 


    index - the index of the object to remove 

*java.util.Vector.removeRange(int,int)*

protected synchronized void removeRange(
  int fromIndex,
  int toIndex)

Removes from this List all of the elements whose index is between fromIndex, 
inclusive and toIndex, exclusive. Shifts any succeeding elements to the left 
(reduces their index). This call shortens the ArrayList by (toIndex - 
fromIndex) elements. (If toIndex==fromIndex, this operation has no effect.) 


    fromIndex - index of first element to be removed 
    toIndex - index after last element to be removed 

*java.util.Vector.retainAll(Collection<?>)*

public synchronized boolean retainAll(java.util.Collection<?> c)

Retains only the elements in this Vector that are contained in the specified 
Collection. In other words, removes from this Vector all of its elements that 
are not contained in the specified Collection. 


    c - a collection of elements to be retained in this Vector (all other elements are 
       removed) 

    Returns: true if this Vector changed as a result of the call 

*java.util.Vector.set(int,E)*

public synchronized |E| set(
  int index,
  E element)

Replaces the element at the specified position in this Vector with the 
specified element. 


    index - index of the element to replace 
    element - element to be stored at the specified position 

    Returns: the element previously at the specified position 

*java.util.Vector.setElementAt(E,int)*

public synchronized void setElementAt(
  E obj,
  int index)

Sets the component at the specifiedindexof this vector to be the specified 
object. The previous component at that position is discarded. 

The index must be a value greater than or equal to0and less than the current 
size of the vector. 

This method is identical in functionality to the set(int, 
E)(|java.util.Vector|) method (which is part of the (|java.util.List|) 
interface). Note that thesetmethod reverses the order of the parameters, to 
more closely match array usage. Note also that thesetmethod returns the old 
value that was stored at the specified position. 


    obj - what the component is to be set to 
    index - the specified index 

*java.util.Vector.setSize(int)*

public synchronized void setSize(int newSize)

Sets the size of this vector. If the new size is greater than the current size, 
newnullitems are added to the end of the vector. If the new size is less than 
the current size, all components at indexnewSizeand greater are discarded. 


    newSize - the new size of this vector 

*java.util.Vector.size()*

public synchronized int size()

Returns the number of components in this vector. 



    Returns: the number of components in this vector 

*java.util.Vector.subList(int,int)*

public synchronized |java.util.List|<E> subList(
  int fromIndex,
  int toIndex)

Returns a view of the portion of this List between fromIndex, inclusive, and 
toIndex, exclusive. (If fromIndex and toIndex are equal, the returned List is 
empty.) The returned List is backed by this List, so changes in the returned 
List are reflected in this List, and vice-versa. The returned List supports all 
of the optional List operations supported by this List. 

This method eliminates the need for explicit range operations (of the sort that 
commonly exist for arrays). Any operation that expects a List can be used as a 
range operation by operating on a subList view instead of a whole List. For 
example, the following idiom removes a range of elements from a List: 

list.subList(from, to).clear(); 

Similar idioms may be constructed for indexOf and lastIndexOf, and all of the 
algorithms in the Collections class can be applied to a subList. 

The semantics of the List returned by this method become undefined if the 
backing list (i.e., this List) is structurally modified in any way other than 
via the returned List. (Structural modifications are those that change the size 
of the List, or otherwise perturb it in such a fashion that iterations in 
progress may yield incorrect results.) 


    fromIndex - low endpoint (inclusive) of the subList 
    toIndex - high endpoint (exclusive) of the subList 

    Returns: a view of the specified range within this List 

*java.util.Vector.toArray()*

public synchronized |java.lang.Object|[] toArray()

Returns an array containing all of the elements in this Vector in the correct 
order. 



*java.util.Vector.toArray(T[])*

public synchronized |T|[] toArray(T[] a)

Returns an array containing all of the elements in this Vector in the correct 
order; the runtime type of the returned array is that of the specified array. 
If the Vector fits in the specified array, it is returned therein. Otherwise, a 
new array is allocated with the runtime type of the specified array and the 
size of this Vector. 

If the Vector fits in the specified array with room to spare (i.e., the array 
has more elements than the Vector), the element in the array immediately 
following the end of the Vector is set to null. (This is useful in determining 
the length of the Vector only if the caller knows that the Vector does not 
contain any null elements.) 


    a - the array into which the elements of the Vector are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing the elements of the Vector 

*java.util.Vector.toString()*

public synchronized |java.lang.String| toString()

Returns a string representation of this Vector, containing the String 
representation of each element. 



*java.util.Vector.trimToSize()*

public synchronized void trimToSize()

Trims the capacity of this vector to be the vector's current size. If the 
capacity of this vector is larger than its current size, then the capacity is 
changed to equal the size by replacing its internal data array, kept in the 
fieldelementData, with a smaller one. An application can use this operation to 
minimize the storage of a vector. 




