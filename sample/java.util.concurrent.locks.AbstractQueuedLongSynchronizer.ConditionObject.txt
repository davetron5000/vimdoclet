*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject* *AbstractQueuedLongSynchronizer.ConditionObject* 

public class AbstractQueuedLongSynchronizer.ConditionObject
  extends    |java.lang.Object|
  implements |java.util.concurrent.locks.Condition|
             |java.io.Serializable|

|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Description|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Fields|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Constructors|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Methods|

================================================================================

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Constructors*
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject()|Cr

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Methods*
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await(long,TimeUnit)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitNanos(long)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUninterruptibly()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(Date)|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitingThreads()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitQueueLength()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.hasWaiters()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signal()|
|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signalAll()|

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject_Description*

Condition implementation for a 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) serving as the 
basis of a (|java.util.concurrent.locks.Lock|) implementation. 

Method documentation for this class describes mechanics, not behavioral 
specifications from the point of view of Lock and Condition users. Exported 
versions of this class will in general need to be accompanied by documentation 
describing condition semantics that rely on those of the associated 
AbstractQueuedLongSynchronizer. 

This class is Serializable, but all fields are transient, so deserialized 
conditions have no waiters. 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject()*

public AbstractQueuedLongSynchronizer.ConditionObject()

Creates a new ConditionObject instance. 


*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await()*

public final void await()
  throws |java.lang.InterruptedException|
         
Implements interruptible condition wait. 

If current thread is interrupted, throw InterruptedException Save lock state 
returned by 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
Invoke 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument, throwing IllegalMonitorStateException if it 
fails. Block until signalled or interrupted Reacquire by invoking specialized 
version of 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument. If interrupted while blocked in step 4, throw 
exception 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.await(long,TimeUnit)*

public final boolean await(
  long time,
  java.util.concurrent.TimeUnit unit)
  throws |java.lang.InterruptedException|
         
Implements timed condition wait. 

If current thread is interrupted, throw InterruptedException Save lock state 
returned by 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
Invoke 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument, throwing IllegalMonitorStateException if it 
fails. Block until signalled, interrupted, or timed out Reacquire by invoking 
specialized version of 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument. If interrupted while blocked in step 4, throw 
InterruptedException If timed out while blocked in step 4, return false, else 
true 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitNanos(long)*

public final long awaitNanos(long nanosTimeout)
  throws |java.lang.InterruptedException|
         
Implements timed condition wait. 

If current thread is interrupted, throw InterruptedException Save lock state 
returned by 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
Invoke 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument, throwing IllegalMonitorStateException if it 
fails. Block until signalled, interrupted, or timed out Reacquire by invoking 
specialized version of 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument. If interrupted while blocked in step 4, throw 
InterruptedException 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUninterruptibly()*

public final void awaitUninterruptibly()

Implements uninterruptible condition wait. 

Save lock state returned by 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
Invoke 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument, throwing IllegalMonitorStateException if it 
fails. Block until signalled Reacquire by invoking specialized version of 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument. 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.awaitUntil(Date)*

public final boolean awaitUntil(java.util.Date deadline)
  throws |java.lang.InterruptedException|
         
Implements absolute timed condition wait. 

If current thread is interrupted, throw InterruptedException Save lock state 
returned by 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
Invoke 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument, throwing IllegalMonitorStateException if it 
fails. Block until signalled, interrupted, or timed out Reacquire by invoking 
specialized version of 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject|) 
with saved state as argument. If interrupted while blocked in step 4, throw 
InterruptedException If timed out while blocked in step 4, return false, else 
true 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitingThreads()*

protected final |java.util.Collection|<Thread> getWaitingThreads()

Returns a collection containing those threads that may be waiting on this 
Condition. Implements 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) . 



    Returns: the collection of threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.getWaitQueueLength()*

protected final int getWaitQueueLength()

Returns an estimate of the number of threads waiting on this condition. 
Implements (|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) . 



    Returns: the estimated number of waiting threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.hasWaiters()*

protected final boolean hasWaiters()

Queries whether any threads are waiting on this condition. Implements 
(|java.util.concurrent.locks.AbstractQueuedLongSynchronizer|) . 



    Returns: {@code true} if there are any waiting threads 

*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signal()*

public final void signal()

Moves the longest-waiting thread, if one exists, from the wait queue for this 
condition to the wait queue for the owning lock. 



*java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject.signalAll()*

public final void signalAll()

Moves all threads from the wait queue for this condition to the wait queue for 
the owning lock. 




