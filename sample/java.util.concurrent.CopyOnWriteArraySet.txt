*java.util.concurrent.CopyOnWriteArraySet* *CopyOnWriteArraySet* Ajava.util.Sett

public class CopyOnWriteArraySet<E>
  extends    |java.util.AbstractSet|
  implements |java.io.Serializable|

|java.util.concurrent.CopyOnWriteArraySet_Description|
|java.util.concurrent.CopyOnWriteArraySet_Fields|
|java.util.concurrent.CopyOnWriteArraySet_Constructors|
|java.util.concurrent.CopyOnWriteArraySet_Methods|

================================================================================

*java.util.concurrent.CopyOnWriteArraySet_Constructors*
|java.util.concurrent.CopyOnWriteArraySet()|Creates an empty set.
|java.util.concurrent.CopyOnWriteArraySet(Collection<?extendsE>)|Creates a set 

*java.util.concurrent.CopyOnWriteArraySet_Methods*
|java.util.concurrent.CopyOnWriteArraySet.add(E)|Adds the specified element to 
|java.util.concurrent.CopyOnWriteArraySet.addAll(Collection<?extendsE>)|Adds al
|java.util.concurrent.CopyOnWriteArraySet.clear()|Removes all of the elements f
|java.util.concurrent.CopyOnWriteArraySet.contains(Object)|Returns true if this
|java.util.concurrent.CopyOnWriteArraySet.containsAll(Collection<?>)|Returns tr
|java.util.concurrent.CopyOnWriteArraySet.equals(Object)|Compares the specified
|java.util.concurrent.CopyOnWriteArraySet.isEmpty()|Returns true if this set co
|java.util.concurrent.CopyOnWriteArraySet.iterator()|Returns an iterator over t
|java.util.concurrent.CopyOnWriteArraySet.remove(Object)|Removes the specified 
|java.util.concurrent.CopyOnWriteArraySet.removeAll(Collection<?>)|Removes from
|java.util.concurrent.CopyOnWriteArraySet.retainAll(Collection<?>)|Retains only
|java.util.concurrent.CopyOnWriteArraySet.size()|Returns the number of elements
|java.util.concurrent.CopyOnWriteArraySet.toArray()|Returns an array containing
|java.util.concurrent.CopyOnWriteArraySet.toArray(T[])|Returns an array contain

*java.util.concurrent.CopyOnWriteArraySet_Description*

A (|java.util.Set|) that uses an internal 
(|java.util.concurrent.CopyOnWriteArrayList|) for all of its operations. Thus, 
it shares the same basic properties: 

It is best suited for applications in which set sizes generally stay small, 
read-only operations vastly outnumber mutative operations, and you need to 
prevent interference among threads during traversal. It is thread-safe. 
Mutative operations (add, set, remove, etc.) are expensive since they usually 
entail copying the entire underlying array. Iterators do not support the 
mutative remove operation. Traversal via iterators is fast and cannot encounter 
interference from other threads. Iterators rely on unchanging snapshots of the 
array at the time the iterators were constructed. 

Sample Usage. The following code sketch uses a copy-on-write set to maintain a 
set of Handler objects that perform some action upon state updates. 



class Handler { void handle(); ... } 

class X { private final CopyOnWriteArraySet<Handler> handlers = new 
CopyOnWriteArraySet<Handler>(); public void addHandler(Handler h) { 
handlers.add(h); } 

private long internalState; private synchronized void changeState() { 
internalState = ...; } 

public void update() { changeState(); for (Handler handler : handlers) 
handler.handle(); } } 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.CopyOnWriteArraySet()*

public CopyOnWriteArraySet()

Creates an empty set. 


*java.util.concurrent.CopyOnWriteArraySet(Collection<?extendsE>)*

public CopyOnWriteArraySet(java.util.Collection<? extends E> c)

Creates a set containing all of the elements of the specified collection. 

    c - the collection of elements to initially contain 

*java.util.concurrent.CopyOnWriteArraySet.add(E)*

public boolean add(E e)

Adds the specified element to this set if it is not already present. More 
formally, adds the specified element e to this set if the set contains no 
element e2 such that (e==null?e2==null:e.equals(e2)). If this set already 
contains the element, the call leaves the set unchanged and returns false. 


    e - element to be added to this set 

    Returns: true if this set did not already contain the specified element 

*java.util.concurrent.CopyOnWriteArraySet.addAll(Collection<?extendsE>)*

public boolean addAll(java.util.Collection<? extends E> c)

Adds all of the elements in the specified collection to this set if they're not 
already present. If the specified collection is also a set, the addAll 
operation effectively modifies this set so that its value is the union of the 
two sets. The behavior of this operation is undefined if the specified 
collection is modified while the operation is in progress. 


    c - collection containing elements to be added to this set 

    Returns: true if this set changed as a result of the call 

*java.util.concurrent.CopyOnWriteArraySet.clear()*

public void clear()

Removes all of the elements from this set. The set will be empty after this 
call returns. 



*java.util.concurrent.CopyOnWriteArraySet.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this set contains the specified element. More formally, returns 
true if and only if this set contains an element e such that 
(o==null?e==null:o.equals(e)). 


    o - element whose presence in this set is to be tested 

    Returns: true if this set contains the specified element 

*java.util.concurrent.CopyOnWriteArraySet.containsAll(Collection<?>)*

public boolean containsAll(java.util.Collection<?> c)

Returns true if this set contains all of the elements of the specified 
collection. If the specified collection is also a set, this method returns true 
if it is a subset of this set. 


    c - collection to be checked for containment in this set 

    Returns: true if this set contains all of the elements of the specified collection 

*java.util.concurrent.CopyOnWriteArraySet.equals(Object)*

public boolean equals(java.lang.Object o)

Compares the specified object with this set for equality. Returnstrueif the 
specified object is the same object as this object, or if it is also a 
(|java.util.Set|) and the elements returned by an iterator(|java.util.List|) 
over the specified set are the same as the elements returned by an iterator 
over this set. More formally, the two iterators are considered to return the 
same elements if they return the same number of elements and for every 
elemente1returned by the iterator over the specified set, there is an 
elemente2returned by the iterator over this set such that(e1==null ? e2==null : 
e1.equals(e2)). 


    o - object to be compared for equality with this set 

    Returns: {@code true} if the specified object is equal to this set 

*java.util.concurrent.CopyOnWriteArraySet.isEmpty()*

public boolean isEmpty()

Returns true if this set contains no elements. 



    Returns: true if this set contains no elements 

*java.util.concurrent.CopyOnWriteArraySet.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements contained in this set in the order in 
which these elements were added. 

The returned iterator provides a snapshot of the state of the set when the 
iterator was constructed. No synchronization is needed while traversing the 
iterator. The iterator does NOT support the remove method. 



    Returns: an iterator over the elements in this set 

*java.util.concurrent.CopyOnWriteArraySet.remove(Object)*

public boolean remove(java.lang.Object o)

Removes the specified element from this set if it is present. More formally, 
removes an element e such that (o==null?e==null:o.equals(e)), if this set 
contains such an element. Returns true if this set contained the element (or 
equivalently, if this set changed as a result of the call). (This set will not 
contain the element once the call returns.) 


    o - object to be removed from this set, if present 

    Returns: true if this set contained the specified element 

*java.util.concurrent.CopyOnWriteArraySet.removeAll(Collection<?>)*

public boolean removeAll(java.util.Collection<?> c)

Removes from this set all of its elements that are contained in the specified 
collection. If the specified collection is also a set, this operation 
effectively modifies this set so that its value is the asymmetric set 
difference of the two sets. 


    c - collection containing elements to be removed from this set 

    Returns: true if this set changed as a result of the call 

*java.util.concurrent.CopyOnWriteArraySet.retainAll(Collection<?>)*

public boolean retainAll(java.util.Collection<?> c)

Retains only the elements in this set that are contained in the specified 
collection. In other words, removes from this set all of its elements that are 
not contained in the specified collection. If the specified collection is also 
a set, this operation effectively modifies this set so that its value is the 
intersection of the two sets. 


    c - collection containing elements to be retained in this set 

    Returns: true if this set changed as a result of the call 

*java.util.concurrent.CopyOnWriteArraySet.size()*

public int size()

Returns the number of elements in this set. 



    Returns: the number of elements in this set 

*java.util.concurrent.CopyOnWriteArraySet.toArray()*

public |java.lang.Object|[] toArray()

Returns an array containing all of the elements in this set. If this set makes 
any guarantees as to what order its elements are returned by its iterator, this 
method must return the elements in the same order. 

The returned array will be "safe" in that no references to it are maintained by 
this set. (In other words, this method must allocate a new array even if this 
set is backed by an array). The caller is thus free to modify the returned 
array. 

This method acts as bridge between array-based and collection-based APIs. 



    Returns: an array containing all the elements in this set 

*java.util.concurrent.CopyOnWriteArraySet.toArray(T[])*

public |T|[] toArray(T[] a)

Returns an array containing all of the elements in this set; the runtime type 
of the returned array is that of the specified array. If the set fits in the 
specified array, it is returned therein. Otherwise, a new array is allocated 
with the runtime type of the specified array and the size of this set. 

If this set fits in the specified array with room to spare (i.e., the array has 
more elements than this set), the element in the array immediately following 
the end of the set is set to null. (This is useful in determining the length of 
this set only if the caller knows that this set does not contain any null 
elements.) 

If this set makes any guarantees as to what order its elements are returned by 
its iterator, this method must return the elements in the same order. 

Like the (|java.util.concurrent.CopyOnWriteArraySet|) method, this method acts 
as bridge between array-based and collection-based APIs. Further, this method 
allows precise control over the runtime type of the output array, and may, 
under certain circumstances, be used to save allocation costs. 

Suppose x is a set known to contain only strings. The following code can be 
used to dump the set into a newly allocated array of String: 



String[] y = x.toArray(new String[0]); 

Note that toArray(new Object[0]) is identical in function to toArray(). 


    a - the array into which the elements of this set are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose. 

    Returns: an array containing all the elements in this set 


