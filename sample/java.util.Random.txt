*java.util.Random* *Random* An instance of this class is used to generate a stre

public class Random
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.Random_Description|
|java.util.Random_Fields|
|java.util.Random_Constructors|
|java.util.Random_Methods|

================================================================================

*java.util.Random_Constructors*
|java.util.Random()|Creates a new random number generator.
|java.util.Random(long)|Creates a new random number generator using a singlelon

*java.util.Random_Methods*
|java.util.Random.next(int)|Generates the next pseudorandom number.
|java.util.Random.nextBoolean()|Returns the next pseudorandom, uniformly distri
|java.util.Random.nextBytes(byte[])|Generates random bytes and places them into
|java.util.Random.nextDouble()|Returns the next pseudorandom, uniformly distrib
|java.util.Random.nextFloat()|Returns the next pseudorandom, uniformly distribu
|java.util.Random.nextGaussian()|Returns the next pseudorandom, Gaussian ("norm
|java.util.Random.nextInt()|Returns the next pseudorandom, uniformly distribute
|java.util.Random.nextInt(int)|Returns a pseudorandom, uniformly distributedint
|java.util.Random.nextLong()|Returns the next pseudorandom, uniformly distribut
|java.util.Random.setSeed(long)|Sets the seed of this random number generator u

*java.util.Random_Description*

An instance of this class is used to generate a stream of pseudorandom numbers. 
The class uses a 48-bit seed, which is modified using a linear congruential 
formula. (See Donald Knuth, The Art of Computer Programming, Volume 3, Section 
3.2.1.) 

If two instances ofRandomare created with the same seed, and the same sequence 
of method calls is made for each, they will generate and return identical 
sequences of numbers. In order to guarantee this property, particular 
algorithms are specified for the classRandom. Java implementations must use all 
the algorithms shown here for the classRandom, for the sake of absolute 
portability of Java code. However, subclasses of classRandomare permitted to 
use other algorithms, so long as they adhere to the general contracts for all 
the methods. 

The algorithms implemented by classRandomuse aprotectedutility method that on 
each invocation can supply up to 32 pseudorandomly generated bits. 

Many applications will find the method (|java.lang.Math|) simpler to use. 



*java.util.Random()*

public Random()

Creates a new random number generator. This constructor sets the seed of the 
random number generator to a value very likely to be distinct from any other 
invocation of this constructor. 


*java.util.Random(long)*

public Random(long seed)

Creates a new random number generator using a singlelongseed. The seed is the 
initial value of the internal state of the pseudorandom number generator which 
is maintained by method (|java.util.Random|) . 

The invocationnew Random(seed)is equivalent to: 

Random rnd = new Random(); rnd.setSeed(seed); 

    seed - the initial seed 

*java.util.Random.next(int)*

protected int next(int bits)

Generates the next pseudorandom number. Subclasses should override this, as 
this is used by all other methods. 

The general contract ofnextis that it returns anintvalue and if the 
argumentbitsis between1and32(inclusive), then that many low-order bits of the 
returned value will be (approximately) independently chosen bit values, each of 
which is (approximately) equally likely to be0or1. The methodnextis implemented 
by classRandomby atomically updating the seed to 

(seed * 0x5DEECE66DL + 0xBL) & ((1L << 48) - 1) 

and returning 

(int)(seed >>> (48 - bits)). 

This is a linear congruential pseudorandom number generator, as defined by D. 
H. Lehmer and described by Donald E. Knuth in The Art of Computer Programming, 
Volume 3: Seminumerical Algorithms, section 3.2.1. 


    bits - random bits 

    Returns: the next pseudorandom value from this random number generator's sequence 

*java.util.Random.nextBoolean()*

public boolean nextBoolean()

Returns the next pseudorandom, uniformly distributedbooleanvalue from this 
random number generator's sequence. The general contract ofnextBooleanis that 
onebooleanvalue is pseudorandomly generated and returned. The 
valuestrueandfalseare produced with (approximately) equal probability. 

The methodnextBooleanis implemented by classRandomas if by: 

public boolean nextBoolean() { return next(1) != 0; } 



    Returns: the next pseudorandom, uniformly distributed {@code boolean} value from this 
             random number generator's sequence 

*java.util.Random.nextBytes(byte[])*

public void nextBytes(byte[] bytes)

Generates random bytes and places them into a user-supplied byte array. The 
number of random bytes produced is equal to the length of the byte array. 

The methodnextBytesis implemented by classRandomas if by: 

public void nextBytes(byte[] bytes) { for (int i = 0; i 0; rnd >>= 8) 
bytes[i++] = (byte)rnd; } 


    bytes - the byte array to fill with random bytes 

*java.util.Random.nextDouble()*

public double nextDouble()

Returns the next pseudorandom, uniformly distributeddoublevalue 
between0.0and1.0from this random number generator's sequence. 

The general contract ofnextDoubleis that onedoublevalue, chosen (approximately) 
uniformly from the range0.0d(inclusive) to1.0d(exclusive), is pseudorandomly 
generated and returned. 

The methodnextDoubleis implemented by classRandomas if by: 

public double nextDouble() { return (((long)next(26) << 27) + next(27)) / 
(double)(1L << 53); } 

The hedge "approximately" is used in the foregoing description only because 
thenextmethod is only approximately an unbiased source of independently chosen 
bits. If it were a perfect source of randomly chosen bits, then the algorithm 
shown would choosedoublevalues from the stated range with perfect uniformity. 
[In early versions of Java, the result was incorrectly calculated as: 

return (((long)next(27) << 27) + next(27)) / (double)(1L << 54); 

This might seem to be equivalent, if not better, but in fact it introduced a 
large nonuniformity because of the bias in the rounding of floating-point 
numbers: it was three times as likely that the low-order bit of the significand 
would be 0 than that it would be 1! This nonuniformity probably doesn't matter 
much in practice, but we strive for perfection.] 



    Returns: the next pseudorandom, uniformly distributed {@code double} value between 
             {@code 0.0} and {@code 1.0} from this random number generator's 
             sequence 

*java.util.Random.nextFloat()*

public float nextFloat()

Returns the next pseudorandom, uniformly distributedfloatvalue 
between0.0and1.0from this random number generator's sequence. 

The general contract ofnextFloatis that onefloatvalue, chosen (approximately) 
uniformly from the range0.0f(inclusive) to1.0f(exclusive), is pseudorandomly 
generated and returned. All 224 possiblefloatvalues of the form mxwhere m is a 
positive integer less than 224 , are produced with (approximately) equal 
probability. 

The methodnextFloatis implemented by classRandomas if by: 

public float nextFloat() { return next(24) / ((float)(1 << 24)); } 

The hedge "approximately" is used in the foregoing description only because the 
next method is only approximately an unbiased source of independently chosen 
bits. If it were a perfect source of randomly chosen bits, then the algorithm 
shown would choosefloatvalues from the stated range with perfect uniformity. 
[In early versions of Java, the result was incorrectly calculated as: 

return next(30) / ((float)(1 << 30)); 

This might seem to be equivalent, if not better, but in fact it introduced a 
slight nonuniformity because of the bias in the rounding of floating-point 
numbers: it was slightly more likely that the low-order bit of the significand 
would be 0 than that it would be 1.] 



    Returns: the next pseudorandom, uniformly distributed {@code float} value between {@code 
             0.0} and {@code 1.0} from this random number generator's sequence 

*java.util.Random.nextGaussian()*

public synchronized double nextGaussian()

Returns the next pseudorandom, Gaussian ("normally") distributeddoublevalue 
with mean0.0and standard deviation1.0from this random number generator's 
sequence. 

The general contract ofnextGaussianis that onedoublevalue, chosen from 
(approximately) the usual normal distribution with mean0.0and standard 
deviation1.0, is pseudorandomly generated and returned. 

The methodnextGaussianis implemented by classRandomas if by a threadsafe 
version of the following: 

private double nextNextGaussian; private boolean haveNextNextGaussian = false; 

public double nextGaussian() { if (haveNextNextGaussian) { haveNextNextGaussian 
= false; return nextNextGaussian; } else { double v1, v2, s; do { v1 = 2 * 
nextDouble() - 1; // between -1.0 and 1.0 v2 = 2 * nextDouble() - 1; // between 
-1.0 and 1.0 s = v1 * v1 + v2 * v2; } while (s >= 1 || s == 0); double 
multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s); nextNextGaussian = v2 * 
multiplier; haveNextNextGaussian = true; return v1 * multiplier; } } 

This uses the polar method of G. E. P. Box, M. E. Muller, and G. Marsaglia, as 
described by Donald E. Knuth in The Art of Computer Programming, Volume 3: 
Seminumerical Algorithms, section 3.4.1, subsection C, algorithm P. Note that 
it generates two independent values at the cost of only one call 
toStrictMath.logand one call toStrictMath.sqrt. 



    Returns: the next pseudorandom, Gaussian ("normally") distributed {@code double} value 
             with mean {@code 0.0} and standard deviation {@code 1.0} from this 
             random number generator's sequence 

*java.util.Random.nextInt()*

public int nextInt()

Returns the next pseudorandom, uniformly distributedintvalue from this random 
number generator's sequence. The general contract ofnextIntis that oneintvalue 
is pseudorandomly generated and returned. All 232 possibleintvalues are 
produced with (approximately) equal probability. 

The methodnextIntis implemented by classRandomas if by: 

public int nextInt() { return next(32); } 



    Returns: the next pseudorandom, uniformly distributed {@code int} value from this random 
             number generator's sequence 

*java.util.Random.nextInt(int)*

public int nextInt(int n)

Returns a pseudorandom, uniformly distributedintvalue between 0 (inclusive) and 
the specified value (exclusive), drawn from this random number generator's 
sequence. The general contract ofnextIntis that oneintvalue in the specified 
range is pseudorandomly generated and returned. Allnpossibleintvalues are 
produced with (approximately) equal probability. The methodnextInt(int n)is 
implemented by classRandomas if by: 

public int nextInt(int n) { if (n > 31); 

int bits, val; do { bits = next(31); val = bits % n; } while (bits - val + 
(n-1) < 0); return val; } 

The hedge "approximately" is used in the foregoing description only because the 
next method is only approximately an unbiased source of independently chosen 
bits. If it were a perfect source of randomly chosen bits, then the algorithm 
shown would chooseintvalues from the stated range with perfect uniformity. 

The algorithm is slightly tricky. It rejects values that would result in an 
uneven distribution (due to the fact that 2^31 is not divisible by n). The 
probability of a value being rejected depends on n. The worst case is n=2^30+1, 
for which the probability of a reject is 1/2, and the expected number of 
iterations before the loop terminates is 2. 

The algorithm treats the case where n is a power of two specially: it returns 
the correct number of high-order bits from the underlying pseudo-random number 
generator. In the absence of special treatment, the correct number of low-order 
bits would be returned. Linear congruential pseudo-random number generators 
such as the one implemented by this class are known to have short periods in 
the sequence of values of their low-order bits. Thus, this special case greatly 
increases the length of the sequence of values returned by successive calls to 
this method if n is a small power of two. 


    n - the bound on the random number to be returned. Must be positive. 

    Returns: the next pseudorandom, uniformly distributed {@code int} value between {@code 
             0} (inclusive) and {@code n} (exclusive) from this random number 
             generator's sequence 

*java.util.Random.nextLong()*

public long nextLong()

Returns the next pseudorandom, uniformly distributedlongvalue from this random 
number generator's sequence. The general contract ofnextLongis that 
onelongvalue is pseudorandomly generated and returned. 

The methodnextLongis implemented by classRandomas if by: 

public long nextLong() { return ((long)next(32) << 32) + next(32); } 

Because classRandomuses a seed with only 48 bits, this algorithm will not 
return all possiblelongvalues. 



    Returns: the next pseudorandom, uniformly distributed {@code long} value from this 
             random number generator's sequence 

*java.util.Random.setSeed(long)*

public synchronized void setSeed(long seed)

Sets the seed of this random number generator using a singlelongseed. The 
general contract ofsetSeedis that it alters the state of this random number 
generator object so as to be in exactly the same state as if it had just been 
created with the argumentseedas a seed. The methodsetSeedis implemented by 
classRandomby atomically updating the seed to 

(seed ^ 0x5DEECE66DL) & ((1L << 48) - 1) 

and clearing thehaveNextNextGaussianflag used by (|java.util.Random|) . 

The implementation ofsetSeedby classRandomhappens to use only 48 bits of the 
given seed. In general, however, an overriding method may use all 64 bits of 
thelongargument as a seed value. 


    seed - the initial seed 


