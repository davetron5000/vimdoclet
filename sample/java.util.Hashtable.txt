*java.util.Hashtable* *Hashtable* This class implements a hashtable, which maps 

public class Hashtable<K,V>
  extends    |java.util.Dictionary|
  implements |java.util.Map|
             |java.lang.Cloneable|
             |java.io.Serializable|

|java.util.Hashtable_Description|
|java.util.Hashtable_Fields|
|java.util.Hashtable_Constructors|
|java.util.Hashtable_Methods|

================================================================================

*java.util.Hashtable_Constructors*
|java.util.Hashtable()|Constructs a new, empty hashtable with a default initial
|java.util.Hashtable(int)|Constructs a new, empty hashtable with the specified 
|java.util.Hashtable(int,float)|Constructs a new, empty hashtable with the spec
|java.util.Hashtable(Map<?extendsK,?extendsV>)|Constructs a new hashtable with 

*java.util.Hashtable_Methods*
|java.util.Hashtable.clear()|Clears this hashtable so that it contains no keys.
|java.util.Hashtable.clone()|Creates a shallow copy of this hashtable.
|java.util.Hashtable.contains(Object)|Tests if some key maps into the specified
|java.util.Hashtable.containsKey(Object)|Tests if the specified object is a key
|java.util.Hashtable.containsValue(Object)|Returns true if this hashtable maps 
|java.util.Hashtable.elements()|Returns an enumeration of the values in this ha
|java.util.Hashtable.entrySet()|Returns aSetview of the mappings contained in t
|java.util.Hashtable.equals(Object)|Compares the specified Object with this Map
|java.util.Hashtable.get(Object)|Returns the value to which the specified key i
|java.util.Hashtable.hashCode()|Returns the hash code value for this Map as per
|java.util.Hashtable.isEmpty()|Tests if this hashtable maps no keys to values.
|java.util.Hashtable.keys()|Returns an enumeration of the keys in this hashtabl
|java.util.Hashtable.keySet()|Returns aSetview of the keys contained in this ma
|java.util.Hashtable.put(K,V)|Maps the specified key to the specified  value in
|java.util.Hashtable.putAll(Map<?extendsK,?extendsV>)|Copies all of the mapping
|java.util.Hashtable.rehash()|Increases the capacity of and internally reorgani
|java.util.Hashtable.remove(Object)|Removes the key (and its corresponding valu
|java.util.Hashtable.size()|Returns the number of keys in this hashtable.
|java.util.Hashtable.toString()|Returns a string representation of this Hashtab
|java.util.Hashtable.values()|Returns aCollectionview of the values contained i

*java.util.Hashtable_Description*

This class implements a hashtable, which maps keys to values. Any non-null 
object can be used as a key or as a value. 

To successfully store and retrieve objects from a hashtable, the objects used 
as keys must implement the hashCode method and the equals method. 

An instance of Hashtable has two parameters that affect its performance: 
initial capacity and load factor. The capacity is the number of buckets in the 
hash table, and the initial capacity is simply the capacity at the time the 
hash table is created. Note that the hash table is open: in the case of a "hash 
collision", a single bucket stores multiple entries, which must be searched 
sequentially. The load factor is a measure of how full the hash table is 
allowed to get before its capacity is automatically increased. The initial 
capacity and load factor parameters are merely hints to the implementation. The 
exact details as to when and whether the rehash method is invoked are 
implementation-dependent. 

Generally, the default load factor (.75) offers a good tradeoff between time 
and space costs. Higher values decrease the space overhead but increase the 
time cost to look up an entry (which is reflected in most Hashtable operations, 
including get and put). 

The initial capacity controls a tradeoff between wasted space and the need for 
rehash operations, which are time-consuming. No rehash operations will ever 
occur if the initial capacity is greater than the maximum number of entries the 
Hashtable will contain divided by its load factor. However, setting the initial 
capacity too high can waste space. 

If many entries are to be made into a Hashtable, creating it with a 
sufficiently large capacity may allow the entries to be inserted more 
efficiently than letting it perform automatic rehashing as needed to grow the 
table. 

This example creates a hashtable of numbers. It uses the names of the numbers 
as keys: 

Hashtable numbers = new Hashtable(); numbers.put("one", 1); numbers.put("two", 
2); numbers.put("three", 3); 

To retrieve a number, use the following code: 

Integer n = numbers.get("two"); if (n != null) { System.out.println("two = " + 
n); } 

The iterators returned by the iterator method of the collections returned by 
all of this class's "collection view methods" are fail-fast: if the Hashtable 
is structurally modified at any time after the iterator is created, in any way 
except through the iterator's own remove method, the iterator will throw a 
(|java.util.ConcurrentModificationException|) . Thus, in the face of concurrent 
modification, the iterator fails quickly and cleanly, rather than risking 
arbitrary, non-deterministic behavior at an undetermined time in the future. 
The Enumerations returned by Hashtable's keys and elements methods are not 
fail-fast. 

Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, 
generally speaking, impossible to make any hard guarantees in the presence of 
unsynchronized concurrent modification. Fail-fast iterators throw 
ConcurrentModificationException on a best-effort basis. Therefore, it would be 
wrong to write a program that depended on this exception for its correctness: 
the fail-fast behavior of iterators should be used only to detect bugs. 

As of the Java 2 platform v1.2, this class was retrofitted to implement the 
(|java.util.Map|) interface, making it a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 
Unlike the new collection implementations,Hashtableis synchronized. 



*java.util.Hashtable()*

public Hashtable()

Constructs a new, empty hashtable with a default initial capacity (11) and load 
factor (0.75). 


*java.util.Hashtable(int)*

public Hashtable(int initialCapacity)

Constructs a new, empty hashtable with the specified initial capacity and 
default load factor (0.75). 

    initialCapacity - the initial capacity of the hashtable. 

*java.util.Hashtable(int,float)*

public Hashtable(
  int initialCapacity,
  float loadFactor)

Constructs a new, empty hashtable with the specified initial capacity and the 
specified load factor. 

    initialCapacity - the initial capacity of the hashtable. 
    loadFactor - the load factor of the hashtable. 

*java.util.Hashtable(Map<?extendsK,?extendsV>)*

public Hashtable(java.util.Map<? extends K, ? extends V> t)

Constructs a new hashtable with the same mappings as the given Map. The 
hashtable is created with an initial capacity sufficient to hold the mappings 
in the given Map and a default load factor (0.75). 

    t - the map whose mappings are to be placed in this map. 

*java.util.Hashtable.clear()*

public synchronized void clear()

Clears this hashtable so that it contains no keys. 



*java.util.Hashtable.clone()*

public synchronized |java.lang.Object| clone()

Creates a shallow copy of this hashtable. All the structure of the hashtable 
itself is copied, but the keys and values are not cloned. This is a relatively 
expensive operation. 



    Returns: a clone of the hashtable 

*java.util.Hashtable.contains(Object)*

public synchronized boolean contains(java.lang.Object value)

Tests if some key maps into the specified value in this hashtable. This 
operation is more expensive than the containsKey(|java.util.Hashtable|) method. 

Note that this method is identical in functionality to 
containsValue(|java.util.Hashtable|) , (which is part of the (|java.util.Map|) 
interface in the collections framework). 


    value - a value to search for 

    Returns: true if and only if some key maps to the value argument in this hashtable as 
             determined by the equals method; false otherwise. 

*java.util.Hashtable.containsKey(Object)*

public synchronized boolean containsKey(java.lang.Object key)

Tests if the specified object is a key in this hashtable. 


    key - possible key 

    Returns: true if and only if the specified object is a key in this hashtable, as 
             determined by the equals method; false otherwise. 

*java.util.Hashtable.containsValue(Object)*

public boolean containsValue(java.lang.Object value)

Returns true if this hashtable maps one or more keys to this value. 

Note that this method is identical in functionality to 
contains(|java.util.Hashtable|) (which predates the (|java.util.Map|) 
interface). 


    value - value whose presence in this hashtable is to be tested 

    Returns: true if this map maps one or more keys to the specified value 

*java.util.Hashtable.elements()*

public synchronized |java.util.Enumeration|<V> elements()

Returns an enumeration of the values in this hashtable. Use the Enumeration 
methods on the returned object to fetch the elements sequentially. 



    Returns: an enumeration of the values in this hashtable. 

*java.util.Hashtable.entrySet()*

public |java.util.Set|<Entry<K,V>> entrySet()

Returns a (|java.util.Set|) view of the mappings contained in this map. The set 
is backed by the map, so changes to the map are reflected in the set, and 
vice-versa. If the map is modified while an iteration over the set is in 
progress (except through the iterator's own remove operation, or through the 
setValue operation on a map entry returned by the iterator) the results of the 
iteration are undefined. The set supports element removal, which removes the 
corresponding mapping from the map, via the Iterator.remove, Set.remove, 
removeAll, retainAll and clear operations. It does not support the add or 
addAll operations. 



*java.util.Hashtable.equals(Object)*

public synchronized boolean equals(java.lang.Object o)

Compares the specified Object with this Map for equality, as per the definition 
in the Map interface. 


    o - object to be compared for equality with this hashtable 

    Returns: true if the specified Object is equal to this Map 

*java.util.Hashtable.get(Object)*

public synchronized |V| get(java.lang.Object key)

Returns the value to which the specified key is mapped, ornullif this map 
contains no mapping for the key. 

More formally, if this map contains a mapping from a keykto a valuevsuch 
that(key.equals(k)), then this method returnsv; otherwise it returnsnull. 
(There can be at most one such mapping.) 


    key - the key whose associated value is to be returned 

    Returns: the value to which the specified key is mapped, or {@code null} if this map 
             contains no mapping for the key 

*java.util.Hashtable.hashCode()*

public synchronized int hashCode()

Returns the hash code value for this Map as per the definition in the Map 
interface. 



*java.util.Hashtable.isEmpty()*

public synchronized boolean isEmpty()

Tests if this hashtable maps no keys to values. 



    Returns: true if this hashtable maps no keys to values; false otherwise. 

*java.util.Hashtable.keys()*

public synchronized |java.util.Enumeration|<K> keys()

Returns an enumeration of the keys in this hashtable. 



    Returns: an enumeration of the keys in this hashtable. 

*java.util.Hashtable.keySet()*

public |java.util.Set|<K> keySet()

Returns a (|java.util.Set|) view of the keys contained in this map. The set is 
backed by the map, so changes to the map are reflected in the set, and 
vice-versa. If the map is modified while an iteration over the set is in 
progress (except through the iterator's own remove operation), the results of 
the iteration are undefined. The set supports element removal, which removes 
the corresponding mapping from the map, via the Iterator.remove, Set.remove, 
removeAll, retainAll, and clear operations. It does not support the add or 
addAll operations. 



*java.util.Hashtable.put(K,V)*

public synchronized |V| put(
  K key,
  V value)

Maps the specified key to the specified value in this hashtable. Neither the 
key nor the value can be null. 

The value can be retrieved by calling the get method with a key that is equal 
to the original key. 


    key - the hashtable key 
    value - the value 

    Returns: the previous value of the specified key in this hashtable, or null if it did 
             not have one 

*java.util.Hashtable.putAll(Map<?extendsK,?extendsV>)*

public synchronized void putAll(java.util.Map<? extends K, ? extends V> t)

Copies all of the mappings from the specified map to this hashtable. These 
mappings will replace any mappings that this hashtable had for any of the keys 
currently in the specified map. 


    t - mappings to be stored in this map 

*java.util.Hashtable.rehash()*

protected void rehash()

Increases the capacity of and internally reorganizes this hashtable, in order 
to accommodate and access its entries more efficiently. This method is called 
automatically when the number of keys in the hashtable exceeds this hashtable's 
capacity and load factor. 



*java.util.Hashtable.remove(Object)*

public synchronized |V| remove(java.lang.Object key)

Removes the key (and its corresponding value) from this hashtable. This method 
does nothing if the key is not in the hashtable. 


    key - the key that needs to be removed 

    Returns: the value to which the key had been mapped in this hashtable, or null if the 
             key did not have a mapping 

*java.util.Hashtable.size()*

public synchronized int size()

Returns the number of keys in this hashtable. 



    Returns: the number of keys in this hashtable. 

*java.util.Hashtable.toString()*

public synchronized |java.lang.String| toString()

Returns a string representation of this Hashtable object in the form of a set 
of entries, enclosed in braces and separated by the ASCII characters "," (comma 
and space). Each entry is rendered as the key, an equals sign =, and the 
associated element, where the toString method is used to convert the key and 
element to strings. 



    Returns: a string representation of this hashtable 

*java.util.Hashtable.values()*

public |java.util.Collection|<V> values()

Returns a (|java.util.Collection|) view of the values contained in this map. 
The collection is backed by the map, so changes to the map are reflected in the 
collection, and vice-versa. If the map is modified while an iteration over the 
collection is in progress (except through the iterator's own remove operation), 
the results of the iteration are undefined. The collection supports element 
removal, which removes the corresponding mapping from the map, via the 
Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. 
It does not support the add or addAll operations. 




