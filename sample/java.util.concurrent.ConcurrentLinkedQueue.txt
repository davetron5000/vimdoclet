*java.util.concurrent.ConcurrentLinkedQueue* *ConcurrentLinkedQueue* An unbounde

public class ConcurrentLinkedQueue<E>
  extends    |java.util.AbstractQueue|
  implements |java.util.Queue|
             |java.io.Serializable|

|java.util.concurrent.ConcurrentLinkedQueue_Description|
|java.util.concurrent.ConcurrentLinkedQueue_Fields|
|java.util.concurrent.ConcurrentLinkedQueue_Constructors|
|java.util.concurrent.ConcurrentLinkedQueue_Methods|

================================================================================

*java.util.concurrent.ConcurrentLinkedQueue_Constructors*
|java.util.concurrent.ConcurrentLinkedQueue()|Creates a ConcurrentLinkedQueue t
|java.util.concurrent.ConcurrentLinkedQueue(Collection<?extendsE>)|Creates a Co

*java.util.concurrent.ConcurrentLinkedQueue_Methods*
|java.util.concurrent.ConcurrentLinkedQueue.add(E)|Inserts the specified elemen
|java.util.concurrent.ConcurrentLinkedQueue.contains(Object)|Returns true if th
|java.util.concurrent.ConcurrentLinkedQueue.isEmpty()|Returns true if this queu
|java.util.concurrent.ConcurrentLinkedQueue.iterator()|Returns an iterator over
|java.util.concurrent.ConcurrentLinkedQueue.offer(E)|Inserts the specified elem
|java.util.concurrent.ConcurrentLinkedQueue.peek()|
|java.util.concurrent.ConcurrentLinkedQueue.poll()|
|java.util.concurrent.ConcurrentLinkedQueue.remove(Object)|Removes a single ins
|java.util.concurrent.ConcurrentLinkedQueue.size()|Returns the number of elemen
|java.util.concurrent.ConcurrentLinkedQueue.toArray()|Returns an array containi
|java.util.concurrent.ConcurrentLinkedQueue.toArray(T[])|Returns an array conta

*java.util.concurrent.ConcurrentLinkedQueue_Description*

An unbounded thread-safe queue(|java.util.Queue|) based on linked nodes. This 
queue orders elements FIFO (first-in-first-out). The head of the queue is that 
element that has been on the queue the longest time. The tail of the queue is 
that element that has been on the queue the shortest time. New elements are 
inserted at the tail of the queue, and the queue retrieval operations obtain 
elements at the head of the queue. A ConcurrentLinkedQueue is an appropriate 
choice when many threads will share access to a common collection. This queue 
does not permit null elements. 

This implementation employs an efficient wait-free algorithm based on one 
described in Simple, Fast, and Practical Non-Blocking and Blocking Concurrent 
Queue Algorithms by Maged M. Michael and Michael L. Scott. 

Beware that, unlike in most collections, the size method is NOT a constant-time 
operation. Because of the asynchronous nature of these queues, determining the 
current number of elements requires a traversal of the elements. 

This class and its iterator implement all of the optional methods of the 
(|java.util.Collection|) and (|java.util.Iterator|) interfaces. 

Memory consistency effects: As with other concurrent collections, actions in a 
thread prior to placing an object into aConcurrentLinkedQueuehappen-before 
actions subsequent to the access or removal of that element from 
theConcurrentLinkedQueuein another thread. 

This class is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.ConcurrentLinkedQueue()*

public ConcurrentLinkedQueue()

Creates a ConcurrentLinkedQueue that is initially empty. 


*java.util.concurrent.ConcurrentLinkedQueue(Collection<?extendsE>)*

public ConcurrentLinkedQueue(java.util.Collection<? extends E> c)

Creates a ConcurrentLinkedQueue initially containing the elements of the given 
collection, added in traversal order of the collection's iterator. 

    c - the collection of elements to initially contain 

*java.util.concurrent.ConcurrentLinkedQueue.add(E)*

public boolean add(E e)

Inserts the specified element at the tail of this queue. 



    Returns: true (as specified by {@link Collection#add}) 

*java.util.concurrent.ConcurrentLinkedQueue.contains(Object)*

public boolean contains(java.lang.Object o)

Returns true if this queue contains the specified element. More formally, 
returns true if and only if this queue contains at least one element e such 
that o.equals(e). 


    o - object to be checked for containment in this queue 

    Returns: true if this queue contains the specified element 

*java.util.concurrent.ConcurrentLinkedQueue.isEmpty()*

public boolean isEmpty()

Returns true if this queue contains no elements. 



    Returns: true if this queue contains no elements 

*java.util.concurrent.ConcurrentLinkedQueue.iterator()*

public |java.util.Iterator|<E> iterator()

Returns an iterator over the elements in this queue in proper sequence. The 
returned iterator is a "weakly consistent" iterator that will never throw 
(|java.util.ConcurrentModificationException|) , and guarantees to traverse 
elements as they existed upon construction of the iterator, and may (but is not 
guaranteed to) reflect any modifications subsequent to construction. 



    Returns: an iterator over the elements in this queue in proper sequence 

*java.util.concurrent.ConcurrentLinkedQueue.offer(E)*

public boolean offer(E e)

Inserts the specified element at the tail of this queue. 



    Returns: true (as specified by {@link Queue#offer}) 

*java.util.concurrent.ConcurrentLinkedQueue.peek()*

public |E| peek()





*java.util.concurrent.ConcurrentLinkedQueue.poll()*

public |E| poll()





*java.util.concurrent.ConcurrentLinkedQueue.remove(Object)*

public boolean remove(java.lang.Object o)

Removes a single instance of the specified element from this queue, if it is 
present. More formally, removes an element e such that o.equals(e), if this 
queue contains one or more such elements. Returns true if this queue contained 
the specified element (or equivalently, if this queue changed as a result of 
the call). 


    o - element to be removed from this queue, if present 

    Returns: true if this queue changed as a result of the call 

*java.util.concurrent.ConcurrentLinkedQueue.size()*

public int size()

Returns the number of elements in this queue. If this queue contains more than 
Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. 

Beware that, unlike in most collections, this method is NOT a constant-time 
operation. Because of the asynchronous nature of these queues, determining the 
current number of elements requires an O(n) traversal. 



    Returns: the number of elements in this queue 

*java.util.concurrent.ConcurrentLinkedQueue.toArray()*

public |java.lang.Object|[] toArray()

Returns an array containing all of the elements in this queue, in proper 
sequence. 

The returned array will be "safe" in that no references to it are maintained by 
this queue. (In other words, this method must allocate a new array). The caller 
is thus free to modify the returned array. 

This method acts as bridge between array-based and collection-based APIs. 



    Returns: an array containing all of the elements in this queue 

*java.util.concurrent.ConcurrentLinkedQueue.toArray(T[])*

public |T|[] toArray(T[] a)

Returns an array containing all of the elements in this queue, in proper 
sequence; the runtime type of the returned array is that of the specified 
array. If the queue fits in the specified array, it is returned therein. 
Otherwise, a new array is allocated with the runtime type of the specified 
array and the size of this queue. 

If this queue fits in the specified array with room to spare (i.e., the array 
has more elements than this queue), the element in the array immediately 
following the end of the queue is set to null. 

Like the (|java.util.concurrent.ConcurrentLinkedQueue|) method, this method 
acts as bridge between array-based and collection-based APIs. Further, this 
method allows precise control over the runtime type of the output array, and 
may, under certain circumstances, be used to save allocation costs. 

Suppose x is a queue known to contain only strings. The following code can be 
used to dump the queue into a newly allocated array of String: 



String[] y = x.toArray(new String[0]); 

Note that toArray(new Object[0]) is identical in function to toArray(). 


    a - the array into which the elements of the queue are to be stored, if it is big 
       enough; otherwise, a new array of the same runtime type is allocated for 
       this purpose 

    Returns: an array containing all of the elements in this queue 


