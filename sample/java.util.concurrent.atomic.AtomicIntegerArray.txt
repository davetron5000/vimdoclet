*java.util.concurrent.atomic.AtomicIntegerArray* *AtomicIntegerArray* Anintarray

public class AtomicIntegerArray
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicIntegerArray_Description|
|java.util.concurrent.atomic.AtomicIntegerArray_Fields|
|java.util.concurrent.atomic.AtomicIntegerArray_Constructors|
|java.util.concurrent.atomic.AtomicIntegerArray_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicIntegerArray_Constructors*
|java.util.concurrent.atomic.AtomicIntegerArray(int)|Creates a new AtomicIntege
|java.util.concurrent.atomic.AtomicIntegerArray(int[])|Creates a new AtomicInte

*java.util.concurrent.atomic.AtomicIntegerArray_Methods*
|java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int,int)|Atomically a
|java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int,int,int)|Atom
|java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int)|Atomically
|java.util.concurrent.atomic.AtomicIntegerArray.get(int)|Gets the current value
|java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int,int)|Atomically a
|java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int)|Atomically
|java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(int)|Atomically
|java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int,int)|Atomically s
|java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(int)|Atomically
|java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int,int)|Eventually set
|java.util.concurrent.atomic.AtomicIntegerArray.length()|Returns the length of 
|java.util.concurrent.atomic.AtomicIntegerArray.set(int,int)|Sets the element a
|java.util.concurrent.atomic.AtomicIntegerArray.toString()|Returns the String r
|java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int,int,int)|

*java.util.concurrent.atomic.AtomicIntegerArray_Description*

Anintarray in which elements may be updated atomically. See the 
(|java.util.concurrent.atomic|) package specification for description of the 
properties of atomic variables. 



*java.util.concurrent.atomic.AtomicIntegerArray(int)*

public AtomicIntegerArray(int length)

Creates a new AtomicIntegerArray of given length. 

    length - the length of the array 

*java.util.concurrent.atomic.AtomicIntegerArray(int[])*

public AtomicIntegerArray(int[] array)

Creates a new AtomicIntegerArray with the same length as, and all elements 
copied from, the given array. 

    array - the array to copy elements from 

*java.util.concurrent.atomic.AtomicIntegerArray.addAndGet(int,int)*

public final int addAndGet(
  int i,
  int delta)

Atomically adds the given value to the element at indexi. 


    i - the index 
    delta - the value to add 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicIntegerArray.compareAndSet(int,int,int)*

public final boolean compareAndSet(
  int i,
  int expect,
  int update)

Atomically sets the element at positionito the given updated value if the 
current value==the expected value. 


    i - the index 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal 
             to the expected value. 

*java.util.concurrent.atomic.AtomicIntegerArray.decrementAndGet(int)*

public final int decrementAndGet(int i)

Atomically decrements by one the element at indexi. 


    i - the index 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicIntegerArray.get(int)*

public final int get(int i)

Gets the current value at positioni. 


    i - the index 

    Returns: the current value 

*java.util.concurrent.atomic.AtomicIntegerArray.getAndAdd(int,int)*

public final int getAndAdd(
  int i,
  int delta)

Atomically adds the given value to the element at indexi. 


    i - the index 
    delta - the value to add 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicIntegerArray.getAndDecrement(int)*

public final int getAndDecrement(int i)

Atomically decrements by one the element at indexi. 


    i - the index 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicIntegerArray.getAndIncrement(int)*

public final int getAndIncrement(int i)

Atomically increments by one the element at indexi. 


    i - the index 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicIntegerArray.getAndSet(int,int)*

public final int getAndSet(
  int i,
  int newValue)

Atomically sets the element at positionito the given value and returns the old 
value. 


    i - the index 
    newValue - the new value 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicIntegerArray.incrementAndGet(int)*

public final int incrementAndGet(int i)

Atomically increments by one the element at indexi. 


    i - the index 

    Returns: the updated value 

*java.util.concurrent.atomic.AtomicIntegerArray.lazySet(int,int)*

public final void lazySet(
  int i,
  int newValue)

Eventually sets the element at positionito the given value. 


    i - the index 
    newValue - the new value 

*java.util.concurrent.atomic.AtomicIntegerArray.length()*

public final int length()

Returns the length of the array. 



    Returns: the length of the array 

*java.util.concurrent.atomic.AtomicIntegerArray.set(int,int)*

public final void set(
  int i,
  int newValue)

Sets the element at positionito the given value. 


    i - the index 
    newValue - the new value 

*java.util.concurrent.atomic.AtomicIntegerArray.toString()*

public |java.lang.String| toString()

Returns the String representation of the current values of array. 



    Returns: the String representation of the current values of array. 

*java.util.concurrent.atomic.AtomicIntegerArray.weakCompareAndSet(int,int,int)*

public final boolean weakCompareAndSet(
  int i,
  int expect,
  int update)

Atomically sets the element at positionito the given updated value if the 
current value==the expected value. 

May fail spuriously and does not provide ordering guarantees, so is only rarely 
an appropriate alternative tocompareAndSet. 


    i - the index 
    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


