*java.util.concurrent.ConcurrentMap* *ConcurrentMap* Ajava.util.Mapproviding add

public interface interface ConcurrentMap<K,V>

  implements |java.util.Map|

|java.util.concurrent.ConcurrentMap_Description|
|java.util.concurrent.ConcurrentMap_Fields|
|java.util.concurrent.ConcurrentMap_Constructors|
|java.util.concurrent.ConcurrentMap_Methods|

================================================================================

*java.util.concurrent.ConcurrentMap_Methods*
|java.util.concurrent.ConcurrentMap.putIfAbsent(K,V)|If the specified key is no
|java.util.concurrent.ConcurrentMap.remove(Object,Object)|Removes the entry for
|java.util.concurrent.ConcurrentMap.replace(K,V)|Replaces the entry for a key o
|java.util.concurrent.ConcurrentMap.replace(K,V,V)|Replaces the entry for a key

*java.util.concurrent.ConcurrentMap_Description*

A (|java.util.Map|) providing additional atomic putIfAbsent, remove, and 
replace methods. 

Memory consistency effects: As with other concurrent collections, actions in a 
thread prior to placing an object into aConcurrentMapas a key or value 
happen-before actions subsequent to the access or removal of that object from 
theConcurrentMapin another thread. 

This interface is a member of the <a 
href="/../technotes/guides/collections/index.html"> Java Collections Framework. 



*java.util.concurrent.ConcurrentMap.putIfAbsent(K,V)*

public |V| putIfAbsent(
  K key,
  V value)

If the specified key is not already associated with a value, associate it with 
the given value. This is equivalent to 

if (!map.containsKey(key)) return map.put(key, value); else return 
map.get(key); 

except that the action is performed atomically. 


    key - key with which the specified value is to be associated 
    value - value to be associated with the specified key 

    Returns: the previous value associated with the specified key, or null if there was no 
             mapping for the key. (A null return can also indicate that the map 
             previously associated null with the key, if the implementation 
             supports null values.) 

*java.util.concurrent.ConcurrentMap.remove(Object,Object)*

public boolean remove(
  java.lang.Object key,
  java.lang.Object value)

Removes the entry for a key only if currently mapped to a given value. This is 
equivalent to 

if (map.containsKey(key) and and map.get(key).equals(value)) { map.remove(key); 
return true; } else return false; 

except that the action is performed atomically. 


    key - key with which the specified value is associated 
    value - value expected to be associated with the specified key 

    Returns: true if the value was removed 

*java.util.concurrent.ConcurrentMap.replace(K,V)*

public |V| replace(
  K key,
  V value)

Replaces the entry for a key only if currently mapped to some value. This is 
equivalent to 

if (map.containsKey(key)) { return map.put(key, value); } else return null; 

except that the action is performed atomically. 


    key - key with which the specified value is associated 
    value - value to be associated with the specified key 

    Returns: the previous value associated with the specified key, or null if there was no 
             mapping for the key. (A null return can also indicate that the map 
             previously associated null with the key, if the implementation 
             supports null values.) 

*java.util.concurrent.ConcurrentMap.replace(K,V,V)*

public boolean replace(
  K key,
  V oldValue,
  V newValue)

Replaces the entry for a key only if currently mapped to a given value. This is 
equivalent to 

if (map.containsKey(key) and and map.get(key).equals(oldValue)) { map.put(key, 
newValue); return true; } else return false; 

except that the action is performed atomically. 


    key - key with which the specified value is associated 
    oldValue - value expected to be associated with the specified key 
    newValue - value to be associated with the specified key 

    Returns: true if the value was replaced 


