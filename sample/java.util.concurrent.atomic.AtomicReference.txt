*java.util.concurrent.atomic.AtomicReference* *AtomicReference* An object refere

public class AtomicReference<V>
  extends    |java.lang.Object|
  implements |java.io.Serializable|

|java.util.concurrent.atomic.AtomicReference_Description|
|java.util.concurrent.atomic.AtomicReference_Fields|
|java.util.concurrent.atomic.AtomicReference_Constructors|
|java.util.concurrent.atomic.AtomicReference_Methods|

================================================================================

*java.util.concurrent.atomic.AtomicReference_Constructors*
|java.util.concurrent.atomic.AtomicReference()|Creates a new AtomicReference wi
|java.util.concurrent.atomic.AtomicReference(V)|Creates a new AtomicReference w

*java.util.concurrent.atomic.AtomicReference_Methods*
|java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)|Atomically sets
|java.util.concurrent.atomic.AtomicReference.get()|Gets the current value.
|java.util.concurrent.atomic.AtomicReference.getAndSet(V)|Atomically sets to th
|java.util.concurrent.atomic.AtomicReference.lazySet(V)|Eventually sets to the 
|java.util.concurrent.atomic.AtomicReference.set(V)|Sets to the given value.
|java.util.concurrent.atomic.AtomicReference.toString()|Returns the String repr
|java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)|Atomically 

*java.util.concurrent.atomic.AtomicReference_Description*

An object reference that may be updated atomically. See the 
(|java.util.concurrent.atomic|) package specification for description of the 
properties of atomic variables. 



*java.util.concurrent.atomic.AtomicReference()*

public AtomicReference()

Creates a new AtomicReference with null initial value. 


*java.util.concurrent.atomic.AtomicReference(V)*

public AtomicReference(V initialValue)

Creates a new AtomicReference with the given initial value. 

    initialValue - the initial value 

*java.util.concurrent.atomic.AtomicReference.compareAndSet(V,V)*

public final boolean compareAndSet(
  V expect,
  V update)

Atomically sets the value to the given updated value if the current value==the 
expected value. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. False return indicates that the actual value was not equal 
             to the expected value. 

*java.util.concurrent.atomic.AtomicReference.get()*

public final |V| get()

Gets the current value. 



    Returns: the current value 

*java.util.concurrent.atomic.AtomicReference.getAndSet(V)*

public final |V| getAndSet(V newValue)

Atomically sets to the given value and returns the old value. 


    newValue - the new value 

    Returns: the previous value 

*java.util.concurrent.atomic.AtomicReference.lazySet(V)*

public final void lazySet(V newValue)

Eventually sets to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicReference.set(V)*

public final void set(V newValue)

Sets to the given value. 


    newValue - the new value 

*java.util.concurrent.atomic.AtomicReference.toString()*

public |java.lang.String| toString()

Returns the String representation of the current value. 



    Returns: the String representation of the current value. 

*java.util.concurrent.atomic.AtomicReference.weakCompareAndSet(V,V)*

public final boolean weakCompareAndSet(
  V expect,
  V update)

Atomically sets the value to the given updated value if the current value==the 
expected value. 

May fail spuriously and does not provide ordering guarantees, so is only rarely 
an appropriate alternative tocompareAndSet. 


    expect - the expected value 
    update - the new value 

    Returns: true if successful. 


